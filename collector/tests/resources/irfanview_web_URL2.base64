<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>IrfanView 64-bit version</title>
    <link rel="shortcut icon" type="image/png" href="images/favicon.png">    
    <link rel="stylesheet" type="text/css" href="style.css">
    
    <!--[if IE]>
	<link rel="stylesheet" type="text/css" href="all-ie-only.css" />
    <![endif]-->
    <!--[if lte IE 7]>
	<link rel="stylesheet" type="text/css" href="ie7-and-down.css" />
    <![endif]-->
    <!--[if IE 6]>
        <link rel="stylesheet" type="text/css" href="ie6.css" />
    <![endif]-->
</head>

<body>

    <header>
        <div id="fixed-menu">
            <input type="checkbox" id="nav-trigger" class="nav-trigger" />
            <label for="nav-trigger">Menu</label>
            <div id="top-navigation">
                <div class="container">
                    <h1 class="logo">
                    <a href="index.htm"><img src="images/logo.png" alt="IrfanView"></a>
                </h1>
                    <ul>
                        <li>
                            <a href="index.htm" class="home-icon">Home</a>
                        </li>
                        <li>
                            <a href="mailto:irfanview@gmx.net" class="email-icon">Send Us an Email</a>
                        </li>
                        <li>
                            <a href="" class="mirror-icon">Other Mirrors</a>
                            <select onchange="window.open(this.value,'_blank')">
                                <option value="">Select Mirror</option>
                                <option value="http://www.irfanview.com/">Germany 1</option>
                                <option value="http://www.irfanview.net/">Germany 2</option>
                                <option value="http://www.irfanview.info/">Germany 3</option>
                                <option value="http://www.mediaside.net/irfanview/">Italy</option>
                                <option value="http://irfanview.mediaside.co.uk/">UK</option>
                                <option value="http://irfanviewpt.mediaside.net/">Portugal</option>
                                <option value="http://www.irfanview.asia/">China</option>
                                <option value="http://www.mediaside.eu/irfan-es/">Spain</option>
                                <option value="http://irfan-view.pl/">Poland 1</option>
                                <option value="http://www.programosy.pl/program,irfanview.html">Poland 2</option>
                                <option value="http://alpinefile.ru/irfanview.html/">Russia</option>
                            </select>
                        </li>
                        <li>
                            <a href="privacy_policy.htm" class="mirror-icon">Privacy Policy</a>
                        </li>
                        <li>
                            <a href="main_what_is_engl.htm" class="english-icon"></a>
                            <a href="main_what_is_ger.htm" class="germany-icon"></a>
                        </li>
                    </ul>
                </div>
            </div>
            <div id="main-navigation">
                <div class="container">
                    <ul>
                        <li class="dropdown">
                            <a class="caret"><span>Download</span></a>
                            <ul class="dropdown-content">
                                <li><a href="main_download_engl.htm">IrfanView 32-bit</a></li>
                                <li><a href="64bit.htm">IrfanView 64-bit</a></li>
                            </ul>
                        </li>
                        <li><a href="languages.htm">Languages</a></li>
                        <li><a href="plugins.htm">Plugins</a></li>
                        <li><a href="skins.htm">Skins</a></li>
                        <li class="nav-tablet-break"><a href="screenshot.htm">Screenshot</a></li>
                        <li class="dropdown">
                            <a class="caret"><span>About</span></a>
                            <ul class="dropdown-content">
                                <li><a href="main_what_is_engl.htm">What is Irfanview?</a></li>
                                <li><a href="main_history.htm">History of Changes</a></li>
                                <li><a href="main_links_engl.htm">Nice www Links</a></li>
                                <li><a href="main_about.htm">About the Author</a></li>
                            </ul>
                        </li>
                        <li><a href="main_support_engl.htm">Support</a></li>
                        <li><a href="faq.htm">Faq</a></li>
                        <li><a href="https://irfanview-forum.de/" target="_blank">Forum</a></li>
                    </ul>
                </div>
            </div>
        </div>
    </header>
    <div class="main">
        <div class="inner-header">
            <h2 class="container">
                IrfanView 64-bit version
        </h2>
        </div>
        <div class="container">
            <div class="inner-content">
                <h3>Starting with IrfanView 4.40 there is also a 64-bit version available.</h3>

                <p><strong>Advantages</strong>&nbsp;of IrfanView 64-bit over 32-bit version:</p>

                <ul style="list-style-type:square">
                    <li>It can load VERY large files/images (image RAM size over 1.3 GB, for special users)</li>
                    <li>Faster for very large images (25+ Megapixels, loading or image operations)</li>
                    <li>Runs &#39;only&#39; on a 64-bit Windows (Vista, Win7, Win8, Win10)</li>
                </ul>

                <p><strong>Advantages</strong>&nbsp;of IrfanView 32-bit over 64-bit version:</p>

                <ul style="list-style-type:square">
                    <li>Runs on a 32-bit and 64-bit Windows</li>
                    <li>Loads all files/images for normal needs (max. RAM size is about 1.3 GB)</li>
                    <li>Needs less disc space</li>
                    <li>All PlugIns will work: not all PlugIns are ported (yet) to 64-bit (like OCR) and some 32-bit PlugIns must be still used in the 64-bit version, some with limitations (see the &quot;Plugins32&quot; folder)</li>
                    <li>Some old 32-bit PlugIns (like RIOT and Adobe 8BF PlugIn) work only in compatilibilty mode in IrfanView-64 (<strong>only 32-bit 8BF files/effects can be used</strong>)</li>
                    <li>Command line options for scanning (/scan etc.) work only in 32-bit (because&nbsp;<strong>no 64-bit TWAIN drivers</strong>)</li>
                </ul>

                <p>
                    <strong>Notes:</strong></p>

                <ul style="list-style-type:square">
                    <li>You can&nbsp;<strong>install both versions</strong>&nbsp;on the same system, just use&nbsp;<strong>different folders</strong>. For example: install the 32-bit version in your &quot;Program Files (x86)&quot; folder and the 64-bit version in your &quot;Program Files&quot; folder (install 32-bit PlugIns to IrfanView-32 and 64-bit PlugIns to IrfanView-64,&nbsp;<strong>DO NOT</strong>&nbsp;mix the PlugIns and IrfanView bit versions)</li>
                    <li>The program name and icon have some extra text in the 64-bit version for better distinguishing</li>
                </ul>

                <p>
                    &nbsp;
                </p>

                <hr />
                <h3>Available 64-bit downloads</h3>

                <p>
                    <a href="http://download.cnet.com/IrfanView-64-bit/3000-2192_4-76444710.html?part=dl-&amp;subj=dl&amp;tag=button" target="_blank" class="alt-download">Download IrfanView-64</a>&nbsp;English&nbsp;<strong>(Version 4.52, Self extracting EXE file, 3.37 MB)</strong>&nbsp;
                    <br /> (SHA-256 checksum: 1e2e020cbf08ccb540c92f423f6b8b44296d0f30af8f904b333cdf0cd9052776)
                    <br />
                    <a href="http://www.irfanview.info/files/iview452_x64.zip" class="alt-download">Download IrfanView-64</a>&nbsp;English&nbsp;<strong>(Version 4.52, ZIP file, 2.91 MB)</strong>&nbsp;
                    <br /> (SHA-256 checksum: 6781bda1daae4afa7003f8f020d67af89e607be8d22430b30abd803f57785f2b)</p>

                <hr />
                <p>
                    <br />
                    <a href="http://www.irfanview.info/files/iview452g_x64_setup.exe" class="alt-download">Download von IrfanView-64</a>&nbsp;Deutsch/German&nbsp;<strong>(Version 4.52, EXE-Installer, 3.63 MB)</strong>
                    <br /> (SHA-256 checksum: 70950549e6448d49546ad0f2dc04bce990ae8f7f008da0e9fbc7d25ba4e50072)
                    <br />
                    <a href="http://www.irfanview.info/files/iview452g_x64.zip" class="alt-download">Download von IrfanView-64</a>&nbsp;Deutsch/German&nbsp;<strong>(Version 4.52, ZIP file, 3.17 MB)</strong>
                    <br /> (SHA-256 checksum: ed19b6bbb180f7f9bdcf26ceb799938e45dd7235a39f269bc37205864d1f4d0c)</p>

                <hr />
                <p>
                    <br />
                    <a href="http://www.fosshub.com/IrfanView.html/iview452_plugins_x64_setup.exe" target="_blank" class="alt-download">Download IrfanView-64 PlugIns</a><strong>&nbsp;(Version 4.52, EXE-Installer, 25.20 MB)</strong>&nbsp;
                    <br /> (SHA-256 checksum: 1eb5b02d832edb610f0e99b87c24a7d609180c787af23ac7eca5ecb085594d75)
                    <br />
                    <a href="http://www.fosshub.com/IrfanView.html/iview452_plugins_x64.zip" target="_blank" class="alt-download">Download IrfanView-64 PlugIns</a><strong>&nbsp;(Version 4.52, ZIP file, 22.70 MB)</strong>
                    <br /> (SHA-256 checksum: 53d4668a22e91831860654ce5b0d57d9ebba0ac85cd2f08852d5e6317464a968)</p>


            </div>
        </div>
    </div>
    <footer>
        <div class="footer-line"></div>
        <div class="footer-content">
            <div class="container">
                <a href="index.htm"><img src="images/logo-footer.png" alt="Footer Logo"></a>
                <div class="footer-text">Copyright &copy; 1996-2018 by Irfan Skiljan. All Rights Reserved. Hosted by <a href="http://domainunion.de/">domainunion</a>.</div>
                <div class="playmain">design by <a href="http://playmain.com/" target="_blank">Playmain</a>.</div>
            </div>
        </div>
    </footer>
</body>

</html>