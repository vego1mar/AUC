


<!DOCTYPE html>
<!--[if IE 9]><!-->
<html lang="pl" xmlns="http://www.w3.org/1999/xhtml" class="gpu no-js">
<!--<![endif]-->
<!--[if lt IE 9]>
<html lang="pl" xmlns="http://www.w3.org/1999/xhtml" class="gpu no-js ie-legacy">
<![endif]-->
<head><meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1" /><meta charset="utf-8" /><link rel="manifest" href="/manifest.json?v=u6snUChj" /><meta name="msapplication-TileColor" content="#88ae04" /><meta name="theme-color" content="#88ae04" />

    <!-- iOS Safari scale bug -->
    <meta name="viewport" content="width=device-width, height=device-height, initial-scale=1.0, maximum-scale=10.0, shrink-to-fit=yes, user-scalable=yes" /><title>Google Chrome 73.0.3683.103 (Mac) - dobreprogramy</title><meta name="description" content=" Chrome to bezpłatna, prosta przeglądarka internetowa firmy Google. Dzięki niej wyszukiwanie w Sieci jest proste i szybkie – w tym samym polu (omnibox) można&hellip;" />
<meta name="keywords" content="Google Chrome,Google LLC,Przeglądarki,stron,WWW,download,pobierz,ściągnij" />
<meta name="apple-mobile-web-app-capable" content="yes" /><meta name="apple-mobile-web-app-status-bar-style" content="black" /><meta name="referrer" content="unsafe-url" /><link rel="preload" href="/cdn/2019_04_12_2/assets/style/webfonts/roboto/style.css" as="style" type="text/css" /><link rel="preload" href="/cdn/2019_04_12_2/assets/style/webfonts/dobreprogramy/style.css" as="style" type="text/css" /><link rel="preload" href="/cdn/2019_04_12_2/assets/style/webfonts/roboto/roboto-bold.woff" as="font" type="font/woff" crossorigin="anonymous" /><link rel="preload" href="/cdn/2019_04_12_2/assets/style/webfonts/dobreprogramy/dobreprogramy.woff" as="font" type="font/woff" crossorigin="anonymous" /><link rel="preload" href="/cdn/2019_04_12_2/assets/style/css/skin_green.css" as="style" type="text/css" /><link rel="stylesheet" href="/cdn/2019_04_12_2/assets/style/css/skin_green.css" /><link rel="stylesheet" media="print" href="//static.dpcdn.pl/2019_04_12_2/assets/style/css/print.css" /><link rel="stylesheet" href="/cdn/2019_04_12_2/assets/style/webfonts/roboto/style.css" /><link rel="stylesheet" href="/cdn/2019_04_12_2/assets/style/webfonts/dobreprogramy/style.css" /><link rel="stylesheet" media="screen" href="/cdn/2019_04_12_2/css/_biblioteki/syntaxhighlighter/shCore.css"><link rel="stylesheet" media="screen" href="/cdn/2019_04_12_2/css/_biblioteki/syntaxhighlighter/shThemeEclipse.css"><script type="text/javascript">var Dp = Dp || {};Dp.user = {id:1,nick:'Anonim',anonymousAvatar:'//static.dpcdn.pl/assets/img/anonymousAvatar.png',serverTime:1555178717,publicationId: 64621,profileUrl:'',avatarUrl:'//static.dpcdn.pl/assets/img/anonymousAvatar.png'};Dp.isMobile = false;Dp.isBlog = false;Dp.isDark = false;</script><link href="https://static.dpcdn.pl" rel="preconnect" /><link href="https://avatars.dpcdn.pl" rel="preconnect" /><link href="https://gallery.dpcdn.pl" rel="preconnect" /><link href="https://images.dpcdn.pl" rel="preconnect" /><link href="https://www.google-analytics.com" rel="preconnect" /><link rel="dns-prefetch" href="https://www.google.pl" /><link rel="dns-prefetch" href="https://www.google.com" /><link rel="dns-prefetch" href="https://www.facebook.com" /><link rel="dns-prefetch" href="https://video.wp.pl" /><link rel="dns-prefetch" href="https://std.wpcdn.pl" /><link rel="dns-prefetch" href="https://www.gstatic.com" /><link rel="dns-prefetch" href="https://www.googletagservices.com" /><link rel="dns-prefetch" href="https://pagead2.googlesyndication.com" /><link rel="dns-prefetch" href="https://gapl.hit.gemius.pl" /><link rel="dns-prefetch" href="https://adservice.google.pl" /><link rel="dns-prefetch" href="https://securepubads.g.doubleclick.net" /><link rel="dns-prefetch" href="https://tpc.googlesyndication.com" /><meta property="logo" content="//static.dpcdn.pl/2019_04_12_2/assets/img/_global/logo_serwisu.svg" />
    <script type="text/javascript">
        var WP = window.WP || [];
    </script>

    
    
    
    <meta property="og:site_name" content="dobreprogramy" />
<meta property="og:type" content="product" />
<meta property="og:title" content="Google Chrome 73.0.3683.103" />
<meta property="og:url" content="https://www.dobreprogramy.pl/Google-Chrome,Program,Mac,64621.html" />
<meta property="og:description" content=" Chrome to bezpłatna, prosta przeglądarka internetowa firmy Google. Dzięki niej wyszukiwanie w Sieci jest proste i szybkie – w tym samym polu (omnibox) można&hellip;" />
<meta property="product:category" content="Przeglądarki stron WWW" />
<meta property="og:image" content="https://gallery.dpcdn.pl/imgc/ToolTileBig/59999/g_-_-x-_-_s_x20160425124704_1.png" />

    <script type="text/javascript">(function(d){d.addEventListener('readystatechange', function(){if(~d.readyState.indexOf('v')){d.getElementById('form1').onsubmit = function(){window.onbeforeunload = function(){};};d.getElementById('hnfbz').addEventListener('click',function(){__doPostBack('ctl00$phContent$hnfbz','')},false);}},false);})(document);</script><style>#hnfbz{display:flex;height:60px;border-radius:4px;background:#88ae04;color:#fff;width:310px;}#hnfbz:hover{background:#759503;cursor:pointer;}#hnfbz::before{content:"\e810";font-family:'dobreprogramy';text-align:center;line-height:1em;color:#88ae04;background:#fff;width:40px;height:40px;line-height:40px;font-size:25px;border-radius:50%;margin:10px;flex-shrink:0;}#hnfbz::after{content:"prz​y pomocy Asystenta pobierania";display:block;position:relative;top:38px;right:calc(100% - 115px);height:20px;flex-shrink:0;font-size:12px;}#hnfbz>span{display:block;font-size:30px;font-family:"roboto_condensed",Heveltica,Verdana,sans-serif;font-weight:700;flex-grow:1;flex-shrink:0;padding-left:10px;border-left:1px solid rgba(0,0,0,0.2);}</style>
<link rel="shortcut icon" href="/favicon.ico" /><script type="text/javascript">
window.wp_adv_labels = true;
var wp_dfp_config = {
   "37": {
      "placement": "/1040541/Programy_MIDDLE",
      "sizes": [[300,600],[300,250],[1,1]],
   },
   "15": {
      "placement": "/1040541/Programy_RELATED",
      "sizes": [[970,90],[970,200],[970,250],[970,300],[728,90],[1,1]],
   },
   "990": {
      "placement": "/1040541/Screening",
      "outOfPage": "true",
   },
   "3": {
      "placement": "/1040541/Programy_TOP",
      "sizes": [[970,250],[750,100],[750,200],[970,90],[970,300],[970,200],[1,1]],
   },
   "53": {
      "placement": "/1040541/Programy_BOTTOM",
      "sizes": [[970,250],[750,100],[750,200],[970,90],[970,300],[970,200],[728,90],[1,1]],
   },
   "79": {
      "placement": "/1040541/Programy_GALLERY",
      "sizes": [[300,600],[300,250],[1,1]],
   },
   "5": {
      "placement": "/1040541/Programy_INTEXT",
      "sizes": [[336,280],[300,250],[600,400],[1,1]],
   },
};

WP.push(function(){
   WP.gaf.loadAndRunBunch();
   googletag.cmd.push(function() {
      googletag.pubads().setTargeting('Kategoria', ['_Brak']);
      googletag.pubads().setTargeting('Temat', ['None']);
      googletag.pubads().setTargeting('PublicationID', ['64621']);
      googletag.pubads().setTargeting('TrafficSource', ['DirectOrUnknown']);
      googletag.pubads().setTargeting('DownloadPhase', ['Download']);
      googletag.pubads().setTargeting('NoAdsPersonalization', ['False']);
      googletag.pubads().setTargeting('IsDark', ['False']);
   });
});
</script>
<link rel="alternate" type="application/rss+xml" title="Aktualności" href="https://feeds.feedburner.com/dobreprogramy/Aktualnosci" /><link rel="alternate" type="application/rss+xml" title="Lab" href="https://feeds.feedburner.com/dobreprogramy/Lab" /><link rel="alternate" type="application/rss+xml" title="Najnowsze programy, wersje stabilne" href="https://feeds.feedburner.com/dobreprogramy/NoweWersjeStabilne" /><link rel="alternate" type="application/rss+xml" title="Najnowsze programy, wersje rozwojowe" href="https://feeds.feedburner.com/dobreprogramy/NoweWersjeRozwojowe" /><link rel="alternate" type="application/rss+xml" title="Blogi czytelników" href="https://feeds.feedburner.com/dobreprogramy/BlogCzytelnikow" /><link rel="search" type="application/opensearchdescription+xml" title="dobreprogramy" href="https://www.dobreprogramy.pl/Search.xml" /><link href="https://plus.google.com/104007253044239785658" rel="publisher" />

    
    <noscript>
        <style>.content-image-wrapper .graf-figure {display:none;}</style>
    </noscript>
    <script type="text/javascript">
<!--//<![CDATA[
var wp_pp_gemius_identifier = '102QcqdLWvSHRiKa9Z29F_VzXmDR_ftvQwRBKAqoVZ3.N7';
var wp_pp_gemius_service = 'gapl';
var wp_sn = 'dobreprogramy';
var wp_cookie_info = false;
var wp_dot_addparams = {"cid":"64621","ctype":"program","cname":"Google Chrome","ccategory":"Przeglądarki stron WWW","csysop":"Mac","cdate":"2019-04-05"};
var rekid = 235655;
//]]> -->
</script>
<script src="//std.wpcdn.pl/wpjslib/wpjslib-sgap.js" id="wpjslib" crossorigin async></script><style>[oztxp]{display:flex;width:100%;background-color:#f1f1f1;}body:not(.variant-mobile) [elgyveyyl]{position:relative !important;left:calc(50% - 970px / 2);width:970px !important;max-width:unset !important;}[cglcare] iframe {max-width:100%;}</style><style>[cglcarembsqsdy]{width:100%;display:block;clear:both;height:0;width:0;}</style><style>[cglcarerkarlfs]{width:100%;display:block;clear:both;margin-top:16px;margin-bottom:16px;}</style><style>[cglcareklsliiw]{width:100%;display:block;clear:both;margin-top:30px;}</style></head>

<body id="top" itemscope="" itemtype="http://schema.org/WebPage" class="variant-desktop skin-green">
<script type="text/javascript">(function(d,c){var scripts = document.getElementsByTagName('script'),script = d.currentScript || scripts[scripts.length - 1],slot = d.createElement('div');slot.setAttribute(c,'');var frame = d.createElement('div');frame.setAttribute('cglcare', '');frame.setAttribute('cglcarembsqsdy', '');frame.appendChild(slot);script.parentElement.insertBefore(frame,script);WP.push(function() {WP.gaf.registerSlot(990,slot);});script.parentElement && script.parentElement.removeChild(script);}(document,'mbsqsdy'));</script>
    <form method="post" action="/Google-Chrome,Program,Mac,64621.html" id="form1" class="page-form">
<div class="aspNetHidden">
<input type="hidden" name="__VIEWSTATE" id="__VIEWSTATE" value="RIGzjS0vy8ZbJ9QW2R0zqG4nxbMjUp6pz4mH5YmdL+JTybCdKcWhc92I8M4StT3MFZsMSfxT+wKrxJ2+e49mrximfGs=" />
</div>

        <header class="header">

  <input type="checkbox" id="navi" />
  <div class="main">
    <div class="main__inner">
    <div style="flex-grow:1;max-width:8px;"></div>
      
      <label class="navi-label" for="navi">
        <span class="icon">&nbsp;</span>
      </label>
      <a href="https://www.dobreprogramy.pl" class="logo" title="dobreprogramy.pl">
        <svg  xmlns="http://www.w3.org/2000/svg" viewBox="0 0 163.03 20"><path d="M5.91 5.44A4.38 4.38 0 0 0 2.06 7.7a4.61 4.61 0 0 0 0 4.55 4.51 4.51 0 0 0 1.64 1.69 4.28 4.28 0 0 0 2.2.6 4.52 4.52 0 0 0 2.25-.6 4.16 4.16 0 0 0 1.63-1.62 4.65 4.65 0 0 0 .58-2.3 4.49 4.49 0 0 0-1.29-3.27 4.26 4.26 0 0 0-3.16-1.31M11.73 0v15.6h-1.46v-1.94a6 6 0 0 1-2 1.67 5.49 5.49 0 0 1-2.47.55 5.48 5.48 0 0 1-4.07-1.73A5.8 5.8 0 0 1 0 9.94a5.73 5.73 0 0 1 1.7-4.16 5.58 5.58 0 0 1 4.1-1.73 5.37 5.37 0 0 1 2.51.59 5.84 5.84 0 0 1 2 1.77V0zM20.34 5.48a4.14 4.14 0 0 0-3.09 1.33A4.46 4.46 0 0 0 16 10a4.64 4.64 0 0 0 .59 2.28 4.13 4.13 0 0 0 1.59 1.62 4.44 4.44 0 0 0 4.39 0 4.13 4.13 0 0 0 1.59-1.62 4.64 4.64 0 0 0 .55-2.28 4.46 4.46 0 0 0-1.29-3.22 4.15 4.15 0 0 0-3.08-1.33m0-1.43a5.59 5.59 0 0 1 4.31 1.88A5.89 5.89 0 0 1 26.2 10a5.88 5.88 0 0 1-1.64 4.12 5.52 5.52 0 0 1-4.22 1.76 5.55 5.55 0 0 1-4.23-1.76A5.88 5.88 0 0 1 14.47 10 5.89 5.89 0 0 1 16 5.94a5.57 5.57 0 0 1 4.32-1.89M34.79 14.49a4.36 4.36 0 0 0 3.86-2.26 4.58 4.58 0 0 0 0-4.55A4.34 4.34 0 0 0 37 6a4.16 4.16 0 0 0-2.19-.61 4.46 4.46 0 0 0-2.26.61 4.19 4.19 0 0 0-1.64 1.62 4.64 4.64 0 0 0-.57 2.3 4.45 4.45 0 0 0 1.28 3.26 4.29 4.29 0 0 0 3.17 1.31M29 15.6V0h1.45v6.28a6.12 6.12 0 0 1 2-1.67A5.69 5.69 0 0 1 39 5.78 5.84 5.84 0 0 1 40.71 10 5.7 5.7 0 0 1 39 14.15a5.51 5.51 0 0 1-4.1 1.73 5.26 5.26 0 0 1-2.49-.58 5.78 5.78 0 0 1-2-1.77v2.07zM42.81 4.33h1.47V6a5.13 5.13 0 0 1 1.4-1.45 2.7 2.7 0 0 1 1.52-.48 2.58 2.58 0 0 1 1.28.39l-.75 1.22a1.87 1.87 0 0 0-.77-.2 2.11 2.11 0 0 0-1.39.59 3.76 3.76 0 0 0-1 1.85 17.65 17.65 0 0 0-.27 3.89v3.79h-1.49V4.33zM59.23 8.83A4.89 4.89 0 0 0 58.38 7a4 4 0 0 0-1.47-1.11A4.41 4.41 0 0 0 55 5.44a4.12 4.12 0 0 0-2.85 1.07 4.8 4.8 0 0 0-1.32 2.32zm0 3.05l1.22.64a6.7 6.7 0 0 1-1.38 1.89 5.58 5.58 0 0 1-1.78 1.1 6.15 6.15 0 0 1-2.22.37 5.38 5.38 0 0 1-4.31-1.8A6.1 6.1 0 0 1 49.18 10a6 6 0 0 1 1.32-3.82A5.38 5.38 0 0 1 55 4.05a5.55 5.55 0 0 1 4.6 2.19 6 6 0 0 1 1.24 3.85H50.67a4.55 4.55 0 0 0 1.26 3.2 4 4 0 0 0 3 1.25 4.84 4.84 0 0 0 1.68-.3 4.21 4.21 0 0 0 1.39-.78 6.66 6.66 0 0 0 1.23-1.58M69.1 6.63a3 3 0 0 0-2.22.92A3.32 3.32 0 0 0 66 9.94a3.42 3.42 0 0 0 .88 2.43 2.94 2.94 0 0 0 2.22.93 2.85 2.85 0 0 0 2.17-.94 3.4 3.4 0 0 0 .89-2.36 3.36 3.36 0 0 0-.87-2.39 2.87 2.87 0 0 0-2.19-.93m-3-2.3v1.19a5.21 5.21 0 0 1 1.65-1.14 4.85 4.85 0 0 1 1.9-.38 4.91 4.91 0 0 1 3.74 1.67A6 6 0 0 1 75 10a5.9 5.9 0 0 1-1.59 4.2 5 5 0 0 1-3.77 1.69 4.53 4.53 0 0 1-1.81-.35 5.33 5.33 0 0 1-1.66-1.13v5.32h-2.86V4.33zM76.64 4.33h2.45v1.44a3 3 0 0 1 1-1.28 2.48 2.48 0 0 1 1.42-.44 2.64 2.64 0 0 1 1.14.29l-.87 2.44a2 2 0 0 0-.78-.25 1.27 1.27 0 0 0-1.09.81 7.37 7.37 0 0 0-.45 3.16v5.1h-2.82V4.33zM89.41 6.72a2.89 2.89 0 0 0-2.19.91 3.26 3.26 0 0 0-.87 2.37 3.26 3.26 0 0 0 .86 2.37 2.89 2.89 0 0 0 2.19.91 2.92 2.92 0 0 0 2.2-.92 3.26 3.26 0 0 0 .88-2.36 3.23 3.23 0 0 0-.86-2.35 2.93 2.93 0 0 0-2.21-.9m0-2.67a6 6 0 0 1 3 .8 5.88 5.88 0 0 1 2.18 8.08 5.61 5.61 0 0 1-2.19 2.14 6 6 0 0 1-3 .78 5.6 5.6 0 0 1-4.13-1.72A5.72 5.72 0 0 1 83.53 10a5.71 5.71 0 0 1 1.94-4.4 5.65 5.65 0 0 1 3.9-1.53M103.06 6.7a3 3 0 0 0-2.21.89 3.11 3.11 0 0 0-.85 2.25 3.15 3.15 0 0 0 .89 2.3 3 3 0 0 0 2.24.9 2.92 2.92 0 0 0 2.17-.88 3.16 3.16 0 0 0 .86-2.3 3.12 3.12 0 0 0-.86-2.28 3 3 0 0 0-2.22-.88M106 4.33h2.8V14a6.37 6.37 0 0 1-1.15 4.2A5.77 5.77 0 0 1 103 20a8.34 8.34 0 0 1-2.79-.41 5 5 0 0 1-1.9-1.22 4.91 4.91 0 0 1-1.15-1.94h3.12a2.68 2.68 0 0 0 1.07.71 4.27 4.27 0 0 0 1.55.25 4 4 0 0 0 1.84-.36 2.08 2.08 0 0 0 1-.91 4.59 4.59 0 0 0 .26-1.92 4.74 4.74 0 0 1-1.56 1.07 5 5 0 0 1-1.86.33 5.1 5.1 0 0 1-3.84-1.6 5.68 5.68 0 0 1-1.57-4.13 5.76 5.76 0 0 1 1.66-4.31 5 5 0 0 1 3.59-1.47 4.72 4.72 0 0 1 1.84.36A5.91 5.91 0 0 1 106 5.58V4.33zM111 4.33h2.45v1.44a3 3 0 0 1 1-1.28 2.51 2.51 0 0 1 1.42-.44 2.6 2.6 0 0 1 1.14.29l-.87 2.44a2 2 0 0 0-.82-.25 1.28 1.28 0 0 0-1.09.81 7.37 7.37 0 0 0-.45 3.16v5.1H111V4.33zM123.77 6.63a2.87 2.87 0 0 0-2.18.93 3.36 3.36 0 0 0-.87 2.39 3.44 3.44 0 0 0 .88 2.41 2.87 2.87 0 0 0 2.18.94 2.94 2.94 0 0 0 2.22-.93 3.41 3.41 0 0 0 .87-2.43 3.31 3.31 0 0 0-.87-2.39 3 3 0 0 0-2.23-.92m3-2.3h2.83V15.6h-2.83v-1.19a5.51 5.51 0 0 1-1.66 1.13 4.65 4.65 0 0 1-1.8.34 5 5 0 0 1-3.78-1.69 5.9 5.9 0 0 1-1.59-4.2 6 6 0 0 1 1.54-4.27 5 5 0 0 1 5.65-1.29 5.07 5.07 0 0 1 1.64 1.14V4.33zM132.4 4.33h2.83v1.31a4.78 4.78 0 0 1 1.61-1.19 4.57 4.57 0 0 1 1.93-.4 3.65 3.65 0 0 1 1.91.52 3.76 3.76 0 0 1 1.37 1.52 4.44 4.44 0 0 1 3.79-2 4 4 0 0 1 2.12.56 3.23 3.23 0 0 1 1.31 1.46 7.72 7.72 0 0 1 .4 2.93v6.6h-2.83V9.9a4.83 4.83 0 0 0-.48-2.59 1.65 1.65 0 0 0-1.44-.68 2.2 2.2 0 0 0-1.31.42 2.44 2.44 0 0 0-.86 1.14 7.21 7.21 0 0 0-.28 2.34v5.07h-2.83v-5.44a7.64 7.64 0 0 0-.22-2.16 2 2 0 0 0-.67-1 1.79 1.79 0 0 0-1.09-.33 2.11 2.11 0 0 0-1.28.42 2.48 2.48 0 0 0-.87 1.17 7.33 7.33 0 0 0-.28 2.38v5h-2.83V4.33zM151.06 4.33h2.9l2.94 7.07 3.23-7.07h2.9l-7.07 15.39h-2.91l2.31-4.98-4.3-10.41z"/></svg>
      </a>
      <div style="flex-grow:1;max-width:20px;"></div>
      <ul class="primary">
        <li id="liNews"><a href="https://www.dobreprogramy.pl/Aktualnosci,Wszystkie,0.html" onclick="ga('send', 'event', 'Menu portalu', 'Newsy');">PUBLIKACJE</a></li>
        <li id="liVideo"><a href="https://www.dobreprogramy.pl/Wideo.html" onclick="ga('send', 'event', 'Menu portalu', 'Wideo');">WIDEO</a></li>
        <li id="liTools" class="active"><a href="/Programy,Windows.html" onclick="ga('send', 'event', 'Menu portalu', 'Programy');">PROGRAMY</a></li>
        <li id="liGames"><a href="https://www.dobreprogramy.pl/Gry,Windows.html" onclick="ga('send', 'event', 'Menu portalu', 'Gry');">GRY</a></li>
        <li id="liHardware"><a href="https://www.dobreprogramy.pl/Sprzet.html" onclick="ga('send', 'event', 'Menu portalu', 'Sprzęt');">SPRZĘT</a></li>
          <li><a href="https://www.dobreprogramy.pl/Blog.html" onclick="ga('send', 'event', 'Menu portalu', 'Blog');">BLOGI</a></li>
        <li><a href="https://forum.dobreprogramy.pl" onclick="ga('send', 'event', 'Menu portalu', 'Forum');">FORUM</a></li>
      </ul>
        <div style="flex-grow:1;"></div>
      <label class="search-label" for="search">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 56.966 56.966"><path d="M55.146 51.887L41.588 37.786A22.926 22.926 0 0 0 46.984 23c0-12.682-10.318-23-23-23s-23 10.318-23 23 10.318 23 23 23c4.761 0 9.298-1.436 13.177-4.162l13.661 14.208c.571.593 1.339.92 2.162.92.779 0 1.518-.297 2.079-.837a3.004 3.004 0 0 0 .083-4.242zM23.984 6c9.374 0 17 7.626 17 17s-7.626 17-17 17-17-7.626-17-17 7.626-17 17-17z" fill="#FFF"/></svg>
        </label>
      <input type="checkbox" id="search" />
      <div class="search">
        <input class="search__input" type="text" placeholder="Wyszukaj..." aria-label="Search input"/>
         <div class="dropdown search-dropdown"></div>
        <div class="close-label" aria-label="Close">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 612 612"><path fill="#FFF" d="M612 36.004L576.521.603 306 270.608 35.478.603 0 36.004l270.522 270.007L0 575.997l35.478 35.4L306 341.411l270.521 269.986 35.479-35.4-270.541-269.986z"/></svg>
        </div>
        <button class="search__button" role="button" aria-label="Search" name="Zamknij"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 56.966 56.966"><path d="M55.146 51.887L41.588 37.786A22.926 22.926 0 0 0 46.984 23c0-12.682-10.318-23-23-23s-23 10.318-23 23 10.318 23 23 23c4.761 0 9.298-1.436 13.177-4.162l13.661 14.208c.571.593 1.339.92 2.162.92.779 0 1.518-.297 2.079-.837a3.004 3.004 0 0 0 .083-4.242zM23.984 6c9.374 0 17 7.626 17 17s-7.626 17-17 17-17-7.626-17-17 7.626-17 17-17z"/></svg></button>
      </div>
        <div style="flex-grow:1;    max-width: 10px;"></div>
        <div class="user">
            <a href="https://ssl.dobreprogramy.pl/Logowanie.html" title="Zaloguj się lub utwórz konto">
                <span class="user__name">Zaloguj się</span>
                <img class="user__image empty" src="//static.dpcdn.pl/assets/img/anonymousAvatar.png" alt="Zaloguj się" />
            </a>
        </div>

          

    </div>
  </div>
  
</header>
        <div id="slide-menu">

            <script type="text/javascript">(function(d,c){var scripts = document.getElementsByTagName('script'),script = d.currentScript || scripts[scripts.length - 1],slot = d.createElement('div');slot.setAttribute(c,'');var frame = d.createElement('div');frame.setAttribute('cglcare', '');frame.setAttribute('cglcarerkarlfs', '');frame.appendChild(slot);script.parentElement.insertBefore(frame,script);WP.push(function() {WP.gaf.registerSlot(3,slot);});script.parentElement && script.parentElement.removeChild(script);}(document,'rkarlfs'));</script>

            

            
    <div id="document" class="main clearfix app-page page-element" role="document">
        <div class="span-12">

            <header id="phContent_itemHeader" class="page-title page-title__withOptions">
                <h1 class="font-serif">
                    <img src="https://gallery.dpcdn.pl/imgc/ToolIcon/59999/g_-_39x39_-_s_x20150713142413_0.png" id="phContent_imgIcon" class="app-icon grid-margin-right" alt="Google Chrome" />
                    Google Chrome
                    <span class="color-annotation">
                        73.0.3683.103
                        <span id="phContent_flagPL" class="flag-pl large"></span>
                    </span>
                </h1>
                <div id="phContent_panRelations" class="options font-heading">
                    <a class="color-list-content text-center grid-margin-right" title="Windows" href="https://www.dobreprogramy.pl/Google-Chrome,Program,Windows,13096.html">
                        <i class="icon icon-windows text-h3" style="font-size: 35px; line-height: 35px;"></i>
                    </a>
                    <a class="color-action text-center grid-margin-right" title="Mac Os">
                        <i class="icon icon-apple text-h3" style="font-size: 35px; line-height: 35px;"></i>
                    </a>
                    <a class="color-list-content text-center grid-margin-right" title="Android" href="https://www.dobreprogramy.pl/Google-Chrome,Program,Android,46233.html">
                        <i class="icon icon-android text-h3" style="font-size: 35px; line-height: 35px;"></i>
                    </a>
                    <a class="color-list-content text-center grid-margin-right" title="iOS" href="https://www.dobreprogramy.pl/Chrome,Program,iOS,49153.html">
                        <i class="icon icon-apple_ios text-h3" style="font-size: 35px; line-height: 35px;"></i>
                    </a>
                    
                </div>
            </header>

            <section id="phContent_BreadcrumbControl_sBreadcrumb" class="page-info text-h4 font-heading"><a href="https://www.dobreprogramy.pl" class="color-annotation"><span>Strona główna</span></a> <i class="icon-right-open icon color-action"><span class="display-none"></span></i> <a href="https://www.dobreprogramy.pl/Programy,Mac.html" class="color-annotation"><span>Mac</span></a> <i class="icon-right-open icon color-action"><span class="display-none"></span></i> <a href="https://www.dobreprogramy.pl/Internet-i-komunikacja,Programy,Mac,303.html" class="color-annotation"><span>Internet i komunikacja</span></a> <i class="icon-right-open icon color-action"><span class="display-none"></span></i> <a href="https://www.dobreprogramy.pl/Przegladarki-stron-WWW,Programy,Mac,832.html" class="color-header"><span>Przeglądarki stron WWW</span></a></section>
<script type="application/ld+json">
{
   "@context": "http://schema.org",
   "@type": "BreadcrumbList",
   "itemListElement": [
   {
      "@type": "ListItem",
      "position": 1,
      "item": {
         "@id": "https://www.dobreprogramy.pl",
         "name": "Strona główna"
      }
   },
   {
      "@type": "ListItem",
      "position": 2,
      "item": {
         "@id": "https://www.dobreprogramy.pl/Programy,Mac.html",
         "name": "Mac"
      }
   },
   {
      "@type": "ListItem",
      "position": 3,
      "item": {
         "@id": "https://www.dobreprogramy.pl/Internet-i-komunikacja,Programy,Mac,303.html",
         "name": "Internet i komunikacja"
      }
   },
   {
      "@type": "ListItem",
      "position": 4,
      "item": {
         "@id": "https://www.dobreprogramy.pl/Przegladarki-stron-WWW,Programy,Mac,832.html",
         "name": "Przeglądarki stron WWW"
      }
   }
   ]
}
</script>


            
            
            
        </div>

        <div id="phContent_page_content" class="span-8 grid-margin-px30-bottom grid-margin-px30-top" data-shortener="pattern" itemtype="http://schema.org/SoftwareApplication" itemscope="">
            <div id="phContent_divMetaOffers" itemprop="offers" itemtype="http://schema.org/Offer" itemscope="">
                <meta itemprop="price" content="0" />
            </div>
            <meta itemprop="name" content="Google Chrome" />
<meta itemprop="version" content="73.0.3683.103" />
<meta itemprop="image" content="https://gallery.dpcdn.pl/imgc/ToolIcon/59999/g_-_70x70_-_s_x20150713142413_0.png" />
<meta itemprop="inLanguage" content="pl-PL" />
<meta itemprop="interactionCount" content="UserDownloads:23184" />
<meta itemprop="interactionCount" content="UserComments:0" />
<meta itemprop="interactionCount" content="UserLikes:2" />
<meta itemprop="datePublished" content="2019-04-05" />
<meta itemprop="applicationCategory" content="CommunicationApplication" />
<meta itemprop="operatingSystem" content="Mac macOS 10.10 i nowsze" />

            <article itemprop="review" itemtype="http://schema.org/Review" itemscope="" style="position:relative;">
                <meta itemprop="datePublished" content="2019-04-05" />
<meta itemprop="author" content="Redakcja" />

                

                    <dfn></dfn><bdi><address></address></bdi><address><kbd></kbd></address>
<div id="hnfbz">
	
                            <span>Po&#8203;bierz program</span>
                            
                    
</div><b><code></code></b><code><dfn></dfn></code><dfn><s></s></dfn><s><bdi></bdi></s>


                    
                    
                    

                    

                    <!--googleoff: all-->
                    <span class="hint grid-margin-px0-bottom">
                        Asystent może proponować instalację ofert reklamowych, na które nie musisz wyrażać zgody w celu pobrania programu.
                        Możesz też użyć linków bezpośrednich bez asystenta (przycisk obok). W przypadku omyłkowej instalacji niechcianego
                        oprogramowania polecamy skorzystanie z
                        <a href="https://www.dobreprogramy.pl/Czyszczenie-systemu-z-niechcianego-oprogramowania,News,61336.html" target="_blank">naszego poradnika</a>.
                    </span>
                    <!--googleon: all-->
                

                <div itemprop="description" class="grid-margin-px30-top">
                    <p>
Chrome to bezpłatna, prosta przeglądarka internetowa firmy Google. Dzięki niej wyszukiwanie w Sieci jest proste i szybkie – w tym samym polu (omnibox) można wpisywać adresy stron i hasła wyszukiwania. Autouzupełnianie podpowie także ostatnie strony i hasła oraz adresy i popularne wyszukiwania z Google'a. Ponadto Chrome może korzystać z dodatków, integruje się z usługami firmy Google i może wyświetlać powiadomienia na pulpicie.

                </div>

                
                

                
                
                <script>
                    var attachLightbox = (function (images) {
                        var s;
                        var first = true;
                        var pausedV = false;

                        console.info("attachLightbox", images);

                        $(images).magnificPopup({
                            type: 'image',
                            key: '64621',
                            closeOnContentClick: false,
                            closeBtnInside: true,
                            mainClass: 'mfp-with-zoom mfp-img-mobile',
                            midClick: true, // Allow opening popup on middle mouse click. Always set it to true if you don't provide alternative source in href.
                            scrollOffset: 100,
                            fixedContentPos: 'auto',
                            fixedBgPos: 'auto',

                            tLoading: 'Wczytywanie...',
                            tClose: 'Zamknij (Esc)',
                            closeMarkup: '<button title="%title%" type="button" name="Zamknij" class="mfp-close backdrop">&#215;</button>',

                            image: {
                                markup: '<div class="mfp-figure">' +
                                            '<div class="mfp-main-image">' +
                                                '<div class="mfp-close backdrop"></div>' +
                                                '<div class="mfp-img"></div>' +
                                                '<div class="mfp-bottom-bar">' +
                                                    '<div class="mfp-title backdrop"></div>' +
                                                    '<div class="mfp-counter backdrop"></div>' +
                                                '</div>' +
                                            '</div>' +
                                        '</div>',
                                verticalFit: true,
                                tError: 'Grafika nie istnieje.', // Error message
                                titleSrc: function (item) {
                                    var img = item.img[0];
                                    var originalImg = item.el[0];
                                    var wrapper = originalImg;
                                    var topWrappers = ['clearfix gallery-group'];

                                    // get image wrapper
                                    while (wrapper.parentElement && topWrappers.indexOf(wrapper.parentElement) === -1 && topWrappers.indexOf(wrapper.parentElement.className) === -1) {
                                        wrapper = wrapper.parentElement;
                                    }

                                    // take from figcaption
                                    var figcaption = wrapper.querySelector('figcaption');
                                    if (figcaption) {
                                        return figcaption.textContent.trim();
                                    }

                                    // or from ALT attribute of image
                                    //if (originalImg && originalImg.alt && originalImg.alt.length && originalImg.alt != 'image') return originalImg.alt.trim();

                                    return '';
                                },
                            },

                            zoom: {
                                enabled: true,
                                duration: 150, // don't foget to change the duration also in CSS
                                cursor: 'mfp-zoom-out-cur', // Class that adds zoom cursor, will be added to body. Set to null to disable zoom out cursor.
                                //opener: function (element) {
                                //    return element.find('img');
                                //},
                            },

                            index: 0, // Used for gallery.Defines starting index.If popup is initialised from DOM element, this option will be ignored.
                            gallery: {
                                enabled: true,
                                navigateByImgClick: true,
                                preload: [1, 2], // read about this option in next Lazy-loading section
                                arrowMarkup: '<button title="%title%" name="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%">' +
                                '<svg class="backdrop" viewBox="0 0 100 100"><path d="M 10,50 L 60,100 L 70,90 L 30,50  L 70,10 L 60,0 Z" class="arrow"></path></svg>' +
                                '</button>', // markup of an arrow button
                                tPrev: 'Poprzednia (&larr;)', // title for left button
                                tNext: 'Następna (&rarr;)', // title for right button
                                tCounter: '%curr% / %total%' // markup of counter
                            },

                            callbacks: {
                                open: (function (e) {
                                    console.info("open");
                                    // pause video player
                                    if (window.vp && window.vp.isPlaying()) {
                                        pausedV = true;
                                        window.vp.pause();
                                    }
                                }),

                                change: function (e) {
                                    console.info("change", first);
                                    // sidebar galerii
                                    var t = this.sideBar[0];

                                    // Pierwsze wyświetlenie
                                    if (first) {
                                        // Jeśli nie ma elementu kontenera, tworzymy go
                                        if (!s) {
                                            s = document.createElement('div');
                                            s.setAttribute('rhmes', '');
                                            t.appendChild(s);

                                            // Register slot using setTimeout with 0 delay
                                            setTimeout(function () {
                                                WP.gaf.registerSlot(79, s);

                                                WP.gaf.loadSlots(rekid, [79], function (data) {
                                                    //console.info("SLOT", data);
                                                    WP.gaf.runSlot(rekid, 79);
                                                });

                                                // UWAGA: Uzycie tej metody odświeża wszystkie sloty na stronie, a nie tylko te wskazane w tablicy
                                                // WP.gaf.loadAndRunSlots(rekid, [79]);

                                            }, 0);
                                        }
                                    }

                                    // synchronize gallery slider with gallery-modal slider - disabled in desktop due to lazy loading slider images
                                    Dp.isMobile && appGallerySlider && appGallerySlider.slideTo(this.index + 1 || 1, 0);
                                },

                                afterChange: function () {
                                    // FIXED: ZSASLUZA-530
                                    WP.stat.dot(wp_sn + "_dynamic", { caction: "slideshow" }, 'top');

                                    gemius_hit(wp_pp_gemius_identifier);
                                    ga('send', 'pageview');

                                    // Jeśli kontener istnieje i pierwszy slajd
                                    if (s && first) {
                                        first = false;
                                        //WP.gaf.registerSlot(79, s);
                                        //WP.gaf.loadAndRunSlots(false, [79]);
                                    }
                                },

                                afterClose: function (e) {
                                    // FIXED: ZSASLUZA-530
                                    WP.stat.dot(wp_sn + "_dynamic", { caction: "slideshow" }, 'top');

                                    gemius_hit(wp_pp_gemius_identifier);
                                    ga('send', 'pageview');
                                    first = true;
                                    if (s) {
                                        s = void 0;
                                        WP.gaf.destroySlot(rekid, 79, true, true);
                                    }
                                    // resume video player
                                    if (window.vp && pausedV) {
                                        window.vp.play();
                                        pausedV = false;
                                    }
                                }

                            }
                        });
                    });
            </script>

                
<section class="block slider">

    

    

        

        <div id="appGallery">
            <div class="swiper-container app-gallery-slider">
                <ul class="swiper-wrapper">
                   
                    

                    
                            <li class="touchcarousel-item swiper-slide">
                            <div class="image small">
                                <a href="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_s_x20150713141329_0.png" rel="lightbox"
                                    onclick="ga('send', 'event', 'Galeria programu', 'integracja_wp', 1);">
                                    <img class="swiper-lazy" data-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_-_-_x20150713141329_0.png" data-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_1.5_-_x20150713141329_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_2.0_-_x20150713141329_0.png 2.0x" data-mfp-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_-_x20150713141329_0.png" data-mfp-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_1.5_-_x20150713141329_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_2.0_-_x20150713141329_0.png 2.0x" src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_16x16_-_-_x20150713141329_0.png" alt="Google Chrome (147090)" />
                                    <div class="swiper-lazy-preloader"></div>
                                </a>
                            </div>
                            </li>
                        
                            <li class="touchcarousel-item swiper-slide">
                            <div class="image small">
                                <a href="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_s_x20150713141330_0.png" rel="lightbox"
                                    onclick="ga('send', 'event', 'Galeria programu', 'integracja_wp', 2);">
                                    <img class="swiper-lazy" data-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_-_-_x20150713141330_0.png" data-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_1.5_-_x20150713141330_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_2.0_-_x20150713141330_0.png 2.0x" data-mfp-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_-_x20150713141330_0.png" data-mfp-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_1.5_-_x20150713141330_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_2.0_-_x20150713141330_0.png 2.0x" src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_16x16_-_-_x20150713141330_0.png" alt="Google Chrome (147091)" />
                                    <div class="swiper-lazy-preloader"></div>
                                </a>
                            </div>
                            </li>
                        
                            <li class="touchcarousel-item swiper-slide">
                            <div class="image small">
                                <a href="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_s_x20150713141331_0.png" rel="lightbox"
                                    onclick="ga('send', 'event', 'Galeria programu', 'integracja_wp', 3);">
                                    <img class="swiper-lazy" data-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_-_-_x20150713141331_0.png" data-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_1.5_-_x20150713141331_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_2.0_-_x20150713141331_0.png 2.0x" data-mfp-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_-_x20150713141331_0.png" data-mfp-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_1.5_-_x20150713141331_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_2.0_-_x20150713141331_0.png 2.0x" src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_16x16_-_-_x20150713141331_0.png" alt="Google Chrome (147092)" />
                                    <div class="swiper-lazy-preloader"></div>
                                </a>
                            </div>
                            </li>
                        
                            <li class="touchcarousel-item swiper-slide">
                            <div class="image small">
                                <a href="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_s_x20150713141336_0.png" rel="lightbox"
                                    onclick="ga('send', 'event', 'Galeria programu', 'integracja_wp', 4);">
                                    <img class="swiper-lazy" data-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_-_-_x20150713141336_0.png" data-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_1.5_-_x20150713141336_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_2.0_-_x20150713141336_0.png 2.0x" data-mfp-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_-_x20150713141336_0.png" data-mfp-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_1.5_-_x20150713141336_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_2.0_-_x20150713141336_0.png 2.0x" src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_16x16_-_-_x20150713141336_0.png" alt="Google Chrome (147093)" />
                                    <div class="swiper-lazy-preloader"></div>
                                </a>
                            </div>
                            </li>
                        
                            <li class="touchcarousel-item swiper-slide">
                            <div class="image small">
                                <a href="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_s_x20150713141337_0.png" rel="lightbox"
                                    onclick="ga('send', 'event', 'Galeria programu', 'integracja_wp', 5);">
                                    <img class="swiper-lazy" data-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_-_-_x20150713141337_0.png" data-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_1.5_-_x20150713141337_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_2.0_-_x20150713141337_0.png 2.0x" data-mfp-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_-_x20150713141337_0.png" data-mfp-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_1.5_-_x20150713141337_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_2.0_-_x20150713141337_0.png 2.0x" src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_16x16_-_-_x20150713141337_0.png" alt="Google Chrome (147094)" />
                                    <div class="swiper-lazy-preloader"></div>
                                </a>
                            </div>
                            </li>
                        
                            <li class="touchcarousel-item swiper-slide">
                            <div class="image small">
                                <a href="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_s_x20150713141338_0.png" rel="lightbox"
                                    onclick="ga('send', 'event', 'Galeria programu', 'integracja_wp', 6);">
                                    <img class="swiper-lazy" data-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_-_-_x20150713141338_0.png" data-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_1.5_-_x20150713141338_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_2.0_-_x20150713141338_0.png 2.0x" data-mfp-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_-_x20150713141338_0.png" data-mfp-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_1.5_-_x20150713141338_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_2.0_-_x20150713141338_0.png 2.0x" src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_16x16_-_-_x20150713141338_0.png" alt="Google Chrome (147095)" />
                                    <div class="swiper-lazy-preloader"></div>
                                </a>
                            </div>
                            </li>
                        
                            <li class="touchcarousel-item swiper-slide">
                            <div class="image small">
                                <a href="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_s_x20150713141340_0.png" rel="lightbox"
                                    onclick="ga('send', 'event', 'Galeria programu', 'integracja_wp', 7);">
                                    <img class="swiper-lazy" data-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_-_-_x20150713141340_0.png" data-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_1.5_-_x20150713141340_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_420x350_2.0_-_x20150713141340_0.png 2.0x" data-mfp-src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_-_-_x20150713141340_0.png" data-mfp-srcset="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_1.5_-_x20150713141340_0.png 1.5x, https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_-x-_2.0_-_x20150713141340_0.png 2.0x" src="https://gallery.dpcdn.pl/imgc/Tools/59999/g_-_16x16_-_-_x20150713141340_0.png" alt="Google Chrome (147096)" />
                                    <div class="swiper-lazy-preloader"></div>
                                </a>
                            </div>
                            </li>
                        

                </ul>

                
                <div class="swiper-button-prev"><svg viewBox="0 0 100 100"><path d="M 10,50 L 60,100 L 70,90 L 30,50  L 70,10 L 60,0 Z" class="arrow"></path></svg></div>
                <div class="swiper-button-next"><svg viewBox="0 0 100 100"><path d="M 10,50 L 60,100 L 70,90 L 30,50  L 70,10 L 60,0 Z" class="arrow"></path></svg></div>

            </div>
        </div>

    

    <script>
        window.initToolsGallery = (function (w) {
            w.appGallerySlider = false;
            var appVideoPlayer = false;
            var titleBlocked = false;
            var playerTitle;
            var player = document.getElementById('appVideo');
            var videoMID = player && +player.dataset.id;
            var playerPaused = false;

            var initGallery = function () {
                return new Swiper('.swiper-container.app-gallery-slider ', {
                    speed: 150, // ms
                    slidesPerView: 'auto',
                    spaceBetween: 10, // px
                    slidesPerColumn: 1,
                    slidesOffsetBefore: 0,
                    slidesOffsetAfter: 0,
                    initialSlide: 0,
                    threshold: 10, // touch-swipe treshold

                    // Disable preloading of all images
                    preloadImages: false,
                    // Enable lazy loading
                    lazy: true,
                    watchSlidesVisibility: true,

                    centeredSlides: Dp.isMobile,

                    loop: false,
                    autoHeight: false,
                    roundLengths: true,
                    grabCursor: true,
                    preventIntercationOnTransition: true,

                    direction: 'horizontal',
                    effect: 'slide', // Could be "slide", "fade", "cube", "coverflow" or "flip"

                    navigation: {
                        nextEl: '.swiper-button-next',
                        prevEl: '.swiper-button-prev',
                    },

                    on: {
                        slideChange: function () {
                            if (!appVideoPlayer) {
                                console.log("No player");
                                return;
                            }

                            if (!playerPaused && this.activeIndex !== 0 && appVideoPlayer.getPosition() < 1 && appVideoPlayer.isPlaying()) {
                                console.log("Pausing player...");
                                appVideoPlayer.pause();
                                playerPaused = true;
                            } else if (playerPaused && this.activeIndex === 0 && appVideoPlayer.getPosition() < 1 && !appVideoPlayer.isPlaying()) {
                                console.log("Resuming player...");
                                appVideoPlayer.play();
                                playerPaused = false;
                            }
                        },
                        //imagesReady: function (e) {
                        //    console.info("All images ready");
                        //    var images = this.$el[0].querySelectorAll('img');
                        //    this.updateSlides();
                        //    this.updateSize();
                        //    this.updateProgress();
                        //    this.updateSlidesClasses();
                        //    this.slideTo(0, 0, false);

                        //    attachLightbox(images);
                        //},
                        init: function (e) {
                            var images = this.$el[0].querySelectorAll('img');
                            //console.info("Slider Init", images);

                            this.updateSlides();
                            this.updateSize();
                            this.updateProgress();
                            this.updateSlidesClasses();
                            this.slideTo(0, 0, false);

                            attachLightbox(images);
                        },
                        //lazyImageReady: function (e) {
                        //    console.info("Lazy image ready", e);
                        //    var image = e.querySelectorAll('img');
                        //    attachLightbox(image);
                        //}
                    }
                });
            };

            var initPlayer = function () {
                if (!videoMID) return;
                return WP.push((function () {
                    new WP.player({
                        url: 'https://get.wp.tv/?mid=' + videoMID,
                        target: '',
                        mediaEmbed: 'intext',
                        autoplay: true,
                        forcesound: false,
                        floatingplayer: false,
                        extendedrelated: false,
                        adv: true,
                    });
                }));
            };

            var blockClick = function (e) {
                e.preventDefault();
                return false;
            };

            var toggleTitleLink = function (e) {
                if (!titleBlocked && e.detail.clip.clip.mid === videoMID) {
                    playerTitle = this.querySelector('a.title');
                    playerTitle.addEventListener('click', blockClick, false);
                    titleBlocked = true;
                } else if (titleBlocked) {
                    playerTitle.removeEventListener('click', blockClick, false);
                    titleBlocked = false;
                }
            };

            var setMaxQuality = function (e) {
                if (e.detail.qualityData.list && e.detail.qualityData.list.length > 1) {
                    appVideoPlayer.off('UPDATE_QUALITY_LIST', setMaxQuality);
                    appVideoPlayer.setQuality(e.detail.qualityData.list.length - 2);
                }
            };

            var newPlayerCallback = function (e) {
                appVideoPlayer = e.detail;
                if (appVideoPlayer) {
                    w.removeEventListener('NEW_WPPLAYER', newPlayerCallback, false);
                    if (!Dp.isMobile) appVideoPlayer.on('UPDATE_QUALITY_LIST', setMaxQuality);
                    appVideoPlayer.on('START_MOVIE', toggleTitleLink);
                    w.vp = appVideoPlayer;
                }
            };

            // init gallery
            if (w.appGallerySlider === false) w.appGallerySlider = initGallery();

            // init player
            if (appVideoPlayer === false && videoMID) {
                // global WP Player init event
                w.addEventListener('NEW_WPPLAYER', newPlayerCallback, false);
                initPlayer();
            }
        });
</script>
</section>


                
<p>
Chrome odznacza się minimalistycznym interfejsem, składającym się z uniwersalnego paska adresu i wyszukiwania oraz listy kart. Po zalogowaniu się na konto Google można korzystać z dodatkowych możliwości, jak synchronizacja historii, danych logowania i zakładek oraz można kontynuować przeglądanie w przeglądarce Chrome na Androidzie. Możliwe jest także otwarcie karty Incognito, której historia i wrażliwe informacje nie będą zapisywane. W trosce o prywatność użytkowników przeglądarka została wyposażona także w opcję <em>Do Not Track</em>, która pozwala wybrać, czy dane użytkownika są zbierane i jak będą wykorzystane. Chrome chroni także użytkownika przed szkodliwymi witrynami, choć należy mieć na uwadze, że często filtry są nadreaktywne. 
</p><script type="text/javascript">(function(d,c){var scripts = document.getElementsByTagName('script'),script = d.currentScript || scripts[scripts.length - 1],slot = d.createElement('div');slot.setAttribute(c,'');var frame = d.createElement('div');frame.setAttribute('cglcare', '');frame.className = 'content-image-wrapper';frame.style.display = 'flex';frame.appendChild(slot);script.parentElement.insertBefore(frame,script);WP.push(function() {WP.gaf.registerSlot(5,slot);});script.parentElement && script.parentElement.removeChild(script);}(document,'dwhym'));</script>
<p>
Chrome zyskuje pełnię możliwości po połączeniu z kontem Google oraz instalacji ulubionych rozszerzeń. Wiele z nich będzie miało możliwość wyświetlania na pulpicie Maka powiadomienia, na przykład najświeższe wiadomości lub aktualnie odtwarzaną piosenkę. W Chromie można także włączyć asystenta Google Now, znanego z Androida, i wtedy skorzystać z wyszukiwania głosowego oraz pozwolić mu zbierać więcej informacji. Wygląd okna przeglądarki można zmienić za pomocą motywów ze sklepu. 
</p>
<p>
Sercem przeglądarki Chrome jest silnik Blink, który powstał na bazie WebCore, wykorzystywanego w WebKicie. Tym samym Chrome jest blisko spokrewniony z Operą i Yandex Browser. Za interpretację skryptów JavaScript odpowiada otwarty silnik <a href="https://code.google.com/p/v8/">V8</a>, który implementuje specyfikację ECMAScript. V8 znany jest ze swojej szybkości, którą zyskuje dzięki kompilacji JavaScriptu do kodu maszynowego przed wykonaniem, a także różnym technikom optymalizacji. 
</p></p>

                <div itemprop="reviewRating" itemscope itemtype="http://schema.org/Rating">
                    <meta itemprop="ratingValue" content="3,9" />
<meta itemprop="worstRating" content="1"/>
<meta itemprop="bestRating" content="5"/>

                </div>
            </article>

                <!-- social control bottom -->
                    

<div class="span-4" style="margin-left: 0">
        <a id="phContent_SocialControl_favSwitch" class="button action compact display-block cursor-pointer" data-action="loginbox">
            <span class="icon-container"><i class="icon-heart icon"></i></span>
            <span class="btn-label text-h35 display-block" style="padding-top: 1px;">
                <span id="phContent_SocialControl_spanPrompt">Dodaj program do ulubionych</span>
                <span id="phContent_SocialControl_spanLabel" class="display-block text-h5" style="margin-top: -2px;">Najpierw zaloguj się lub zał&#243;ż konto</span>
            </span>
        </a>
</div>
<div class="clearfix"></div>

<!-- Social Control Master-->
<section id="phContent_SocialControl_SocialControlMain_socialBox" class="social social_bottom">
  <div class="social__group social__group_share">
    <div class="social__label">Udostępnij:</div>
    <button type="button" class="social__button social__button_facebook js-facebook" role="button" title="Facebook" name="Facebook">
      <svg class="social__icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96.124 96.123"><path d="M72.089.02L59.624 0C45.62 0 36.57 9.285 36.57 23.656v10.907H24.037a1.96 1.96 0 0 0-1.96 1.961v15.803a1.96 1.96 0 0 0 1.96 1.96H36.57v39.876a1.96 1.96 0 0 0 1.96 1.96h16.352a1.96 1.96 0 0 0 1.96-1.96V54.287h14.654a1.96 1.96 0 0 0 1.96-1.96l.006-15.803a1.963 1.963 0 0 0-1.961-1.961H56.842v-9.246c0-4.444 1.059-6.7 6.848-6.7l8.397-.003a1.96 1.96 0 0 0 1.959-1.96V1.98A1.96 1.96 0 0 0 72.089.02z"/></svg>
    </button>
    <button type="button" class="social__button social__button_twitter js-twitter" role="button" title="Twitter" name="Twitter">
      <svg class="social__icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 612 612"><path d="M612 116.258a250.714 250.714 0 0 1-72.088 19.772c25.929-15.527 45.777-40.155 55.184-69.411-24.322 14.379-51.169 24.82-79.775 30.48-22.907-24.437-55.49-39.658-91.63-39.658-69.334 0-125.551 56.217-125.551 125.513 0 9.828 1.109 19.427 3.251 28.606-104.326-5.24-196.835-55.223-258.75-131.174-10.823 18.51-16.98 40.078-16.98 63.101 0 43.559 22.181 81.993 55.835 104.479a125.556 125.556 0 0 1-56.867-15.756v1.568c0 60.806 43.291 111.554 100.693 123.104-10.517 2.83-21.607 4.398-33.08 4.398-8.107 0-15.947-.803-23.634-2.333 15.985 49.907 62.336 86.199 117.253 87.194-42.947 33.654-97.099 53.655-155.916 53.655-10.134 0-20.116-.612-29.944-1.721 55.567 35.681 121.536 56.485 192.438 56.485 230.948 0 357.188-191.291 357.188-357.188l-.421-16.253c24.666-17.593 46.005-39.697 62.794-64.861z"/></svg>
    </button>
  </div>

  
</section>
<!-- Social Control Master -->

<script type="text/javascript">
    function addFavorites(id) {
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            data: "{ id: '" + id + "' }",
            dataType: "json",
            url: "/Providers/FavoritesHandler.asmx/Add",
            success: function (result) {
                $("#phContent_SocialControl_spanPrompt").text("Usuń program z ulubionych");
                $("#phContent_SocialControl_spanLabel").text(result.d);
                $("#phContent_SocialControl_favSwitch").attr("href", "javascript:removeFavorites(" + id + ")");
            }
        });
    }

    function removeFavorites(id) {
        $.ajax({
            type: "POST",
            contentType: "application/json; charset=utf-8",
            data: "{ id: '" + id + "' }",
            dataType: "json",
            url: "/Providers/FavoritesHandler.asmx/Remove",
            success: function (result) {
                $("#phContent_SocialControl_spanPrompt").text("Dodaj program do ulubionych");
                $("#phContent_SocialControl_spanLabel").text(result.d);
                $("#phContent_SocialControl_favSwitch").attr("href", "javascript:addFavorites(" + id + ")");
            }
        });
    }
</script>
                <!-- social control bottom -->
            <section class="page-info text-h4 font-heading grid-margin-px15-top color-annotation clearfix">
                &copy; dobreprogramy
                <div class="float-right"><a href="#reportModal" data-toggle="modal" class="color-inherit">Zaproponuj zmiany w opisie</a> | <a href="#updateModal" data-toggle="modal" class="color-inherit">Zgłoś aktualizację programu</a></div>
            </section>
        </div>
        <!-- koniec bloku treści -->

        <!-- strona post download -->
        

        <!-- koniec strony post download -->
        

        <aside id="phContent_sidebar" style="" class="span-4" role="complementary">
            <section class="block download position-relative" id="download">

                <div class="grid-margin-px30-top">

                    

                    

                    

                    

                        <div class="clearfix"></div>

                        <a id="phContent_btnOtherLinks" class="button standard display-block clearfix" style="cursor: pointer; z-index: 15; padding-left: 0; background:white;">
                            <span id="phContent_spanOtherLinks" class="button large action large main-button display-block span-4 inside"><span class="icon-container" style="background:transparent;border-color: white;"><i class="icon-down-open icon" style="color:white;"></i></span><span class="btn-label size-medium text-bold font-heading display-block grid-margin-px2-top"> Linki do programu</span><span class="btn-infotext display-block text-h6"> bez Asystenta pobierania</span></span>
                        </a>
                </div>

            </section>

                <div id="phContent_widgetLinks" class="widget-sliding-menu width-block-level variant-download-menu" style="z-index: 10;">
                    <section>
                        <div>
                            <div id="links_main" class="menu-group">
                                <header>
                                    <div class="font-heading text-h4 text-center">
                                        <i class="icon icon-apple"></i> OS X
                                    </div>
                                </header>
                                <div>
                                    <div>

                                        
                                                <a class="clearfix overflow-hidden download-choice color-inherit" href="javascript:__doPostBack(&#39;ctl00$phContent$repLinks$ctl00$ctl00&#39;,&#39;&#39;)">
                                                    <span class="button large action download-short float-left">
                                                        <span class="icon-container"><i class="icon-download icon"></i></span>
                                                    </span>

                                                    <div class="font-heading download-info">
                                                        <div id="phContent_repLinks_divLinkInfo_0" class="text-h3 text-ellipsis" title="Google Chrome 73.0.3683.103">Google Chrome 73.0.3683.103</div>
                                                        <div class="text-h5 color-action platform-label">wersja stabilna (Mac)</div>
                                                    </div>
                                                </a>
                                            
                                                <a class="clearfix overflow-hidden download-choice color-inherit" href="javascript:__doPostBack(&#39;ctl00$phContent$repLinks$ctl01$ctl00&#39;,&#39;&#39;)">
                                                    <span class="button large action download-short float-left">
                                                        <span class="icon-container"><i class="icon-download icon"></i></span>
                                                    </span>

                                                    <div class="font-heading download-info">
                                                        <div id="phContent_repLinks_divLinkInfo_1" class="text-h3 text-ellipsis" title="Google Chrome">Google Chrome</div>
                                                        <div class="text-h5 color-action platform-label">Dev</div>
                                                    </div>
                                                </a>
                                            
                                                <a class="clearfix overflow-hidden download-choice color-inherit" href="javascript:__doPostBack(&#39;ctl00$phContent$repLinks$ctl02$ctl00&#39;,&#39;&#39;)">
                                                    <span class="button large action download-short float-left">
                                                        <span class="icon-container"><i class="icon-download icon"></i></span>
                                                    </span>

                                                    <div class="font-heading download-info">
                                                        <div id="phContent_repLinks_divLinkInfo_2" class="text-h3 text-ellipsis" title="Google Chrome">Google Chrome</div>
                                                        <div class="text-h5 color-action platform-label">Canary</div>
                                                    </div>
                                                </a>
                                            
                                                <a class="clearfix overflow-hidden download-choice color-inherit" href="javascript:__doPostBack(&#39;ctl00$phContent$repLinks$ctl03$ctl00&#39;,&#39;&#39;)">
                                                    <span class="button large action download-short float-left">
                                                        <span class="icon-container"><i class="icon-download icon"></i></span>
                                                    </span>

                                                    <div class="font-heading download-info">
                                                        <div id="phContent_repLinks_divLinkInfo_3" class="text-h3 text-ellipsis" title="Google Chrome 58.0.3029.6">Google Chrome 58.0.3029.6</div>
                                                        <div class="text-h5 color-action platform-label">wersja rozwojowa (Mac)</div>
                                                    </div>
                                                </a>
                                            

                                    </div>
                                </div>
                            </div>
                            
                        </div>
                    </section>
                </div>

                

            <section class="block">
                <div class="block-content color-list-content">
                    <!-- dzielimy na dwa -->
                    <div class="clearfix  nested-grid">
                        <div class="span-2 text-h4">
                            <div class="prop-item">
                                <div class="text-h6">Data aktualizacji:</div>
                                <div>
                                    5 kwietnia 2019
                                </div>
                            </div>

                            <div id="phContent_divFileSize" class="prop-item">
                                <div class="text-h6">Rozmiar pliku:</div>
                                <div>
                                    74,36 MB
                                </div>
                            </div>

                            <div class="prop-item">
                                <div class="text-h6">Liczba pobrań:</div>
                                <div>
                                    23 184
                                </div>
                            </div>

                            <div class="prop-item">
                                <div class="text-h6">Producent:</div>
                                <div>
                                    <a id="phContent_hpManufacturer" title="Google LLC" href="https://www.dobreprogramy.pl/Google-LLC,Producent,420.html">Google LLC</a>
                                </div>
                            </div>
                        </div>
                        <div id="ratingBox" class="span-2 clearfix widget-rating">
                            <div class="prop-item">
                                <div class="text-h5 text-center">Ocena redakcji:</div>
                                <div class="widget-rating-field text-h25 color-link">
                                    <span data-type="value" style="width: auto;">
                                        <i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star-half"></i></span>
                                    <span data-type="background" style="visibility: hidden;"><i class="icon icon-star-empty"></i><i class="icon icon-star-empty"></i><i class="icon icon-star-empty"></i><i class="icon icon-star-empty"></i><i class="icon icon-star-empty"></i></span>
                                </div>
                            </div>
                            <div class="prop-item" data-type="rating-global">
                                <div class="text-h5 text-center">Ocena użytkowników:</div>
                                <div class="widget-rating-field text-h25 color-action">
                                    <span data-type="value" style="width: 0;"><span class="container"><i class="icon icon-star"></i><i class="icon icon-star"></i><i class="icon icon-star"></i><i class="icon icon-star"></i><i class="icon icon-star"></i></span></span>
                                    <span data-type="background"><i class="icon icon-star-empty"></i><i class="icon icon-star-empty"></i><i class="icon icon-star-empty"></i><i class="icon icon-star-empty"></i><i class="icon icon-star-empty"></i></span>
                                </div>
                            </div>
                            <div class="prop-item" data-type="rating-user">
                                <div class="text-h5 text-center">Twoja ocena:</div>
                                <div id="phContent_divMyRating" class="widget-rating-field text-h25 color-action" data-value="0" data-clickable="false">
                                    <!-- data-clickable tylko dla widżetu oddawania głosu na program -->
                                    <span data-type="value" style="width: 0;"><i class="icon icon-star"></i><i class="icon icon-star"></i><i class="icon icon-star"></i><i class="icon icon-star"></i><i class="icon icon-star"></i></span>
                                    <span data-type="background"><i class="icon icon-star-empty"></i><i class="icon icon-star-empty"></i><i class="icon icon-star-empty"></i><i class="icon icon-star-empty"></i><i class="icon icon-star-empty"></i></span>

                                </div>
                            </div>
                        </div>
                    </div>
                    <!-- dzielimy na dwa: koniec -->

                    <div class="prop-item">
                        <div class="text-h6">System operacyjny:</div>
                        <div>
                            macOS 10.10 i nowsze
                        </div>
                    </div>

                    <div class="prop-item">
                        <div class="text-h6">Licencja:</div>
                        <div>
                            bezpłatna
                        </div>
                    </div>
                </div>
            </section>

            <section class="block no-mobile">
                <script type="text/javascript">(function(d,c){var scripts = document.getElementsByTagName('script'),script = d.currentScript || scripts[scripts.length - 1],slot = d.createElement('div');slot.setAttribute(c,'');var frame = d.createElement('div');frame.setAttribute('cglcare', '');frame.appendChild(slot);script.parentElement.insertBefore(frame,script);WP.push(function() {WP.gaf.registerSlot(37,slot);});script.parentElement && script.parentElement.removeChild(script);}(document,'uisymnv'));</script>
            </section>

            
            <section class="block no-mobile forum-help-cta">
                <a href="https://forum.dobreprogramy.pl/c/oprogramowanie-komputerowe/problemy-z-oprogramowaniem?utm_source=dobreprogramy&utm_medium=programybox&utm_campaign=forum" title="Znajdź pomoc na forum">
                    <img src="https://gallery.dpcdn.pl/imgc/ToolIcon/59999/g_-_39x39_-_s_x20150713142413_0.png" id="phContent_imageForumCTA" class="app-icon grid-margin-right" />
                    
                    <span>Masz problem z&nbsp;tym <b>programem</b>?</span>
                    <p>Zapytaj na naszym forum!&nbsp;&nbsp;<i class="icon-right-circle"></i></p>
                </a>
            </section>

            <section class="block no-mobile">
                <div class="title-bar options" role="heading">
                    <h3>Statystyki pobrań</h3>
                </div>
                <div class="block-content">
                    <div id="downloadsChart" style="width: 310px; height: 150px;"></div>
                    <!-- <div id="downloadsChart" style="width: 310px; height: 150px;"></div>
                    <div id="downloadsChartLegend" style="margin: auto; display: inline-block;"></div> -->
                </div>

            </section>
            
            
<section class="block app-list no-mobile shortener">
    <div class="title-bar options" role="heading">
        <h3>Programy producenta</h3>
    </div>

    <div class="block-content list active">

        
                <a
                    href="https://www.dobreprogramy.pl/ADB-i-Fastboot-Android-Platform-Tools,Program,Windows,78382.html"
                    class="nested-grid item clearfix"
                    title="ADB i Fastboot – Android Platform Tools 1.0.36"
                    onClick="ga('send', 'event', 'Programy producenta', 'integracja_wp', 1)"
                >
                    <span id="phContent_ProducerToolsControl_repList_img_0" class="image windows"></span>

                    <div class="span-3">
                        <h4 class="color-content">ADB i Fastboot – Android Platform Tools 1.0.36</h4>
                        <span class="nested-grid ">
                            <span class="span-1 split-info">
                                <span class="main text-h5 color-action"><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i></span>
                            </span>
                            <span class="span-1 split-info">
                                <span class="main text-h5 center color-action platform-icons">
                                    <i class="icon-windows" title="Windows"></i> <i class="icon-linux" title="Linux"></i> 
                                </span>
                            </span>
                        </span>
                    </div>
                </a>
            
                <a
                    href="https://www.dobreprogramy.pl/Android-SDK,Program,Windows,89750.html"
                    class="nested-grid item clearfix"
                    title="Android SDK 28.0.1"
                    onClick="ga('send', 'event', 'Programy producenta', 'integracja_wp', 2)"
                >
                    <span id="phContent_ProducerToolsControl_repList_img_1" class="image"><img src="https://gallery.dpcdn.pl/imgc/ToolIcon/84037/g_-_39x39_-_s_xdba051f3-60d9-43d4-82d4-c9e71217419b.png" alt="Android SDK"></span>

                    <div class="span-3">
                        <h4 class="color-content">Android SDK 28.0.1</h4>
                        <span class="nested-grid ">
                            <span class="span-1 split-info">
                                <span class="main text-h5 color-action"><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i></span>
                            </span>
                            <span class="span-1 split-info">
                                <span class="main text-h5 center color-action platform-icons">
                                    <i class="icon-windows" title="Windows"></i> <i class="icon-linux" title="Linux"></i> 
                                </span>
                            </span>
                        </span>
                    </div>
                </a>
            
                <a
                    href="https://www.dobreprogramy.pl/Android-Studio,Program,Windows,41778.html"
                    class="nested-grid item clearfix"
                    title="Android Studio 3.3.2.0"
                    onClick="ga('send', 'event', 'Programy producenta', 'integracja_wp', 3)"
                >
                    <span id="phContent_ProducerToolsControl_repList_img_2" class="image"><img src="https://gallery.dpcdn.pl/imgc/ToolIcon/16899/g_-_39x39_-_s_x20151002134819_0.png" alt="Android Studio"></span>

                    <div class="span-3">
                        <h4 class="color-content">Android Studio 3.3.2.0</h4>
                        <span class="nested-grid ">
                            <span class="span-1 split-info">
                                <span class="main text-h5 color-action"><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star-half"></i></span>
                            </span>
                            <span class="span-1 split-info">
                                <span class="main text-h5 center color-action platform-icons">
                                    <i class="icon-windows" title="Windows"></i> <i class="icon-linux" title="Linux"></i> 
                                </span>
                            </span>
                        </span>
                    </div>
                </a>
            
                <a
                    href="https://www.dobreprogramy.pl/AutoplayStopper-dla-Chrome,Program,Windows,84863.html"
                    class="nested-grid item clearfix"
                    title="AutoplayStopper (dla Chrome) 1.2.0.1"
                    onClick="ga('send', 'event', 'Programy producenta', 'integracja_wp', 4)"
                >
                    <span id="phContent_ProducerToolsControl_repList_img_3" class="image"><img src="https://gallery.dpcdn.pl/imgc/ToolIcon/79267/g_-_39x39_-_s_xba52b679-a696-412b-9161-5e6163736c86.png" alt="AutoplayStopper (dla Chrome)"></span>

                    <div class="span-3">
                        <h4 class="color-content">AutoplayStopper (dla Chrome) 1.2.0.1</h4>
                        <span class="nested-grid ">
                            <span class="span-1 split-info">
                                <span class="main text-h5 color-action"><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i></span>
                            </span>
                            <span class="span-1 split-info">
                                <span class="main text-h5 center color-action platform-icons">
                                    <i class="icon-windows" title="Windows"></i> 
                                </span>
                            </span>
                        </span>
                    </div>
                </a>
            
                <a
                    href="https://www.dobreprogramy.pl/Edytor-Office,Program,Windows,101281.html"
                    class="nested-grid item clearfix"
                    title="Edytor Office 129.2270.2278"
                    onClick="ga('send', 'event', 'Programy producenta', 'integracja_wp', 5)"
                >
                    <span id="phContent_ProducerToolsControl_repList_img_4" class="image windows"></span>

                    <div class="span-3">
                        <h4 class="color-content">Edytor Office 129.2270.2278</h4>
                        <span class="nested-grid ">
                            <span class="span-1 split-info">
                                <span class="main text-h5 color-action"><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star"></i><i class="icon-star-half"></i></span>
                            </span>
                            <span class="span-1 split-info">
                                <span class="main text-h5 center color-action platform-icons">
                                    <i class="icon-windows" title="Windows"></i> 
                                </span>
                            </span>
                        </span>
                    </div>
                </a>
            
        <div id="phContent_ProducerToolsControl_divSeeMore" class="actionbar text-center">
            <a href="https://www.dobreprogramy.pl/Google-LLC,Producent,420.html" id="phContent_ProducerToolsControl_aSeeMore" class="grid-center normal" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Programy producenta&#39;, &#39;integracja_wp&#39;, &#39;wiecej&#39;)">zobacz więcej <span class="icon-container"><i class="icon-right-open"></i></span></a>
        </div>

    </div>

</section>


        </aside>

        
            <div class="clearfix"></div>
            <script type="text/javascript">(function(d,c){var scripts = document.getElementsByTagName('script'),script = d.currentScript || scripts[scripts.length - 1],slot = d.createElement('div');slot.setAttribute(c,'');var frame = d.createElement('div');frame.setAttribute('cglcare', '');frame.setAttribute('cglcareklsliiw', '');frame.appendChild(slot);script.parentElement.insertBefore(frame,script);WP.push(function() {WP.gaf.registerSlot(15,slot);});script.parentElement && script.parentElement.removeChild(script);}(document,'klsliiw'));</script>

<div class="span-12 grid-margin-px30-top">
    <section class="content-list block" role="list">
        <div class="title-bar simple" role="heading">
            <div>
                <h3>Zobacz także</h3>
            </div>
        </div>

        <div class="linked-box grid" >
            
            
                    <div class="linked" role="listitem">
	
                        <a class="linked__cover" href="https://www.dobreprogramy.pl/google-chrome-leniwe-ladowanie-stron,News,101285.html"><img src="https://gallery.dpcdn.pl/imgc/News/90674/g_-_200x150_-_s_x4afa9046-3cd0-413d-b884-363cf1077a7a.jpg" id="phContent_RelatedPublicationsControl_repList_img_0" alt="Google Chrome przyspiesza. &quot;Leniwe ładowanie&quot; stron będzie domyślnym mechanizmem" /></a>
                        <div class="linked__content">
                            <h4><a href="https://www.dobreprogramy.pl/google-chrome-leniwe-ladowanie-stron,News,101285.html" id="phContent_RelatedPublicationsControl_repList_aTitle_0" class="linked__title" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Publikacje powiazane&#39;, &#39;integracja_wp&#39;, 1)">Google Chrome przyspiesza. &quot;Leniwe ładowanie&quot; stron będzie domyślnym mechanizmem</a></h4>
                            <div class="linked__annotation">
                                <time data-time="09.04.2019 20:05:00" title="09.04.2019 20:05:00">9 kwi</time>
                                <a class="color-inherit" href="https://www.dobreprogramy.pl/Autor,Oskar-Ziomek,515834.html">Oskar Ziomek</a>
                                <div class="tags">
                                    <a href="https://www.dobreprogramy.pl/Aktualnosci,Oprogramowanie,7.html" class="tag">Oprogramowanie</a> <a href="https://www.dobreprogramy.pl/Aktualnosci,Internet,9.html" class="tag">Internet</a> 
                                </div>
                                <a class="comment" href="https://www.dobreprogramy.pl/google-chrome-leniwe-ladowanie-stron,News,101285.html#komentarze">
                                    
                                    <svg class="comment__icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 29.87"><path d="M7.23,7H14.4c.3,0,.9.12.94-.89,0-.84-.64-.9-.94-.9H7.23a.85.85,0,0,0-1,.9c0,.81.65.89,1,.89Zm-.42-.2"></path><path d="M24.53,10.76H7.23c-.3,0-1,.08-1,.9a.84.84,0,0,0,1,.89h17.3c.3,0,1-.05.95-.89a.88.88,0,0,0-.95-.9Zm0,0"></path><path d="M24.53,16.29H7.23a.89.89,0,0,0-1,.9c0,.66.65.9,1,.9h17.3c.3,0,.87,0,.95-.9s-.65-.9-.95-.9Zm0,0"></path><path d="M28.8,0H3.2A3.25,3.25,0,0,0,0,3.2V20.8A3.25,3.25,0,0,0,3.2,24H18.43l5.17,5.69a.57.57,0,0,0,.4.18c.07,0,.54,0,.61,0a.54.54,0,0,0,.34-.5V24H28.8A3.25,3.25,0,0,0,32,20.8V3.2A3.25,3.25,0,0,0,28.8,0ZM18.21,21.92H3.82a1.54,1.54,0,0,1-1.74-1.74V3.82A1.54,1.54,0,0,1,3.82,2.08H28.18a1.54,1.54,0,0,1,1.74,1.74V20.18a1.54,1.54,0,0,1-1.74,1.74H23.84a.53.53,0,0,0-.53.53v4.28L19.05,22s0,0-.06,0h-.78ZM30.93,20.8"></path></svg>
                                    <span class="comment__counter">25</span>
                                </a>
                            </div>
                        </div>
                    
</div>
                
                    <div class="linked" role="listitem">
	
                        <a class="linked__cover" href="https://www.dobreprogramy.pl/google-chrome-grupowanie-kart-desktop,News,101183.html"><img src="https://gallery.dpcdn.pl/imgc/News/90574/g_-_200x150_-_s_x2d868bba-4387-40d7-bc0c-5cba4378ac72.jpg" id="phContent_RelatedPublicationsControl_repList_img_1" alt="Google Chrome i grupowanie kart: prace nad wersją na desktopy ruszyły z miejsca" /></a>
                        <div class="linked__content">
                            <h4><a href="https://www.dobreprogramy.pl/google-chrome-grupowanie-kart-desktop,News,101183.html" id="phContent_RelatedPublicationsControl_repList_aTitle_1" class="linked__title" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Publikacje powiazane&#39;, &#39;integracja_wp&#39;, 2)">Google Chrome i grupowanie kart: prace nad wersją na desktopy ruszyły z miejsca</a></h4>
                            <div class="linked__annotation">
                                <time data-time="03.04.2019 21:02:00" title="03.04.2019 21:02:00">3 kwi</time>
                                <a class="color-inherit" href="https://www.dobreprogramy.pl/Autor,Oskar-Ziomek,515834.html">Oskar Ziomek</a>
                                <div class="tags">
                                    <a href="https://www.dobreprogramy.pl/Aktualnosci,Oprogramowanie,7.html" class="tag">Oprogramowanie</a> <a href="https://www.dobreprogramy.pl/Aktualnosci,Internet,9.html" class="tag">Internet</a> 
                                </div>
                                <a class="comment" href="https://www.dobreprogramy.pl/google-chrome-grupowanie-kart-desktop,News,101183.html#komentarze">
                                    
                                    <svg class="comment__icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 29.87"><path d="M7.23,7H14.4c.3,0,.9.12.94-.89,0-.84-.64-.9-.94-.9H7.23a.85.85,0,0,0-1,.9c0,.81.65.89,1,.89Zm-.42-.2"></path><path d="M24.53,10.76H7.23c-.3,0-1,.08-1,.9a.84.84,0,0,0,1,.89h17.3c.3,0,1-.05.95-.89a.88.88,0,0,0-.95-.9Zm0,0"></path><path d="M24.53,16.29H7.23a.89.89,0,0,0-1,.9c0,.66.65.9,1,.9h17.3c.3,0,.87,0,.95-.9s-.65-.9-.95-.9Zm0,0"></path><path d="M28.8,0H3.2A3.25,3.25,0,0,0,0,3.2V20.8A3.25,3.25,0,0,0,3.2,24H18.43l5.17,5.69a.57.57,0,0,0,.4.18c.07,0,.54,0,.61,0a.54.54,0,0,0,.34-.5V24H28.8A3.25,3.25,0,0,0,32,20.8V3.2A3.25,3.25,0,0,0,28.8,0ZM18.21,21.92H3.82a1.54,1.54,0,0,1-1.74-1.74V3.82A1.54,1.54,0,0,1,3.82,2.08H28.18a1.54,1.54,0,0,1,1.74,1.74V20.18a1.54,1.54,0,0,1-1.74,1.74H23.84a.53.53,0,0,0-.53.53v4.28L19.05,22s0,0-.06,0h-.78ZM30.93,20.8"></path></svg>
                                    <span class="comment__counter">16</span>
                                </a>
                            </div>
                        </div>
                    
</div>
                
                    <div class="linked" role="listitem">
	
                        <a class="linked__cover" href="https://www.dobreprogramy.pl/google-chrome-tryb-skupienia,News,100958.html"><img src="https://gallery.dpcdn.pl/imgc/News/90340/g_-_200x150_-_s_x0974abc0-27a7-4223-a346-5d3aa719f267.jpg" id="phContent_RelatedPublicationsControl_repList_img_2" alt="Tryb skupienia w Google Chrome: nowy sposób wyświetlania stron można już testować" /></a>
                        <div class="linked__content">
                            <h4><a href="https://www.dobreprogramy.pl/google-chrome-tryb-skupienia,News,100958.html" id="phContent_RelatedPublicationsControl_repList_aTitle_2" class="linked__title" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Publikacje powiazane&#39;, &#39;integracja_wp&#39;, 3)">Tryb skupienia w Google Chrome: nowy spos&#243;b wyświetlania stron można już testować</a></h4>
                            <div class="linked__annotation">
                                <time data-time="21.03.2019 19:02:00" title="21.03.2019 19:02:00">21 mar</time>
                                <a class="color-inherit" href="https://www.dobreprogramy.pl/Autor,Oskar-Ziomek,515834.html">Oskar Ziomek</a>
                                <div class="tags">
                                    <a href="https://www.dobreprogramy.pl/Aktualnosci,Oprogramowanie,7.html" class="tag">Oprogramowanie</a> <a href="https://www.dobreprogramy.pl/Aktualnosci,Internet,9.html" class="tag">Internet</a> 
                                </div>
                                <a class="comment" href="https://www.dobreprogramy.pl/google-chrome-tryb-skupienia,News,100958.html#komentarze">
                                    
                                    <svg class="comment__icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 29.87"><path d="M7.23,7H14.4c.3,0,.9.12.94-.89,0-.84-.64-.9-.94-.9H7.23a.85.85,0,0,0-1,.9c0,.81.65.89,1,.89Zm-.42-.2"></path><path d="M24.53,10.76H7.23c-.3,0-1,.08-1,.9a.84.84,0,0,0,1,.89h17.3c.3,0,1-.05.95-.89a.88.88,0,0,0-.95-.9Zm0,0"></path><path d="M24.53,16.29H7.23a.89.89,0,0,0-1,.9c0,.66.65.9,1,.9h17.3c.3,0,.87,0,.95-.9s-.65-.9-.95-.9Zm0,0"></path><path d="M28.8,0H3.2A3.25,3.25,0,0,0,0,3.2V20.8A3.25,3.25,0,0,0,3.2,24H18.43l5.17,5.69a.57.57,0,0,0,.4.18c.07,0,.54,0,.61,0a.54.54,0,0,0,.34-.5V24H28.8A3.25,3.25,0,0,0,32,20.8V3.2A3.25,3.25,0,0,0,28.8,0ZM18.21,21.92H3.82a1.54,1.54,0,0,1-1.74-1.74V3.82A1.54,1.54,0,0,1,3.82,2.08H28.18a1.54,1.54,0,0,1,1.74,1.74V20.18a1.54,1.54,0,0,1-1.74,1.74H23.84a.53.53,0,0,0-.53.53v4.28L19.05,22s0,0-.06,0h-.78ZM30.93,20.8"></path></svg>
                                    <span class="comment__counter">18</span>
                                </a>
                            </div>
                        </div>
                    
</div>
                
                    <div class="linked" role="listitem">
	
                        <a class="linked__cover" href="https://www.dobreprogramy.pl/chrome-blokowanie-czujnika-swiatla-ruchu,News,100950.html"><img src="https://gallery.dpcdn.pl/imgc/News/90332/g_-_200x150_-_s_x25ac3a35-f4c8-4858-960c-9072338fd978.jpg" id="phContent_RelatedPublicationsControl_repList_img_3" alt="Google Chrome z blokadą dostępu do czujników światła i ruchu – nowość można już testować" /></a>
                        <div class="linked__content">
                            <h4><a href="https://www.dobreprogramy.pl/chrome-blokowanie-czujnika-swiatla-ruchu,News,100950.html" id="phContent_RelatedPublicationsControl_repList_aTitle_3" class="linked__title" onclick="ga(&#39;send&#39;, &#39;event&#39;, &#39;Publikacje powiazane&#39;, &#39;integracja_wp&#39;, 4)">Google Chrome z blokadą dostępu do czujnik&#243;w światła i ruchu – nowość można już testować</a></h4>
                            <div class="linked__annotation">
                                <time data-time="21.03.2019 12:30:00" title="21.03.2019 12:30:00">21 mar</time>
                                <a class="color-inherit" href="https://www.dobreprogramy.pl/Autor,Oskar-Ziomek,515834.html">Oskar Ziomek</a>
                                <div class="tags">
                                    <a href="https://www.dobreprogramy.pl/Aktualnosci,Oprogramowanie,7.html" class="tag">Oprogramowanie</a> <a href="https://www.dobreprogramy.pl/Aktualnosci,Internet,9.html" class="tag">Internet</a> <a href="https://www.dobreprogramy.pl/Aktualnosci,Bezpieczenstwo,17.html" class="tag">Bezpieczeństwo</a> 
                                </div>
                                <a class="comment" href="https://www.dobreprogramy.pl/chrome-blokowanie-czujnika-swiatla-ruchu,News,100950.html#komentarze">
                                    
                                    <svg class="comment__icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 29.87"><path d="M7.23,7H14.4c.3,0,.9.12.94-.89,0-.84-.64-.9-.94-.9H7.23a.85.85,0,0,0-1,.9c0,.81.65.89,1,.89Zm-.42-.2"></path><path d="M24.53,10.76H7.23c-.3,0-1,.08-1,.9a.84.84,0,0,0,1,.89h17.3c.3,0,1-.05.95-.89a.88.88,0,0,0-.95-.9Zm0,0"></path><path d="M24.53,16.29H7.23a.89.89,0,0,0-1,.9c0,.66.65.9,1,.9h17.3c.3,0,.87,0,.95-.9s-.65-.9-.95-.9Zm0,0"></path><path d="M28.8,0H3.2A3.25,3.25,0,0,0,0,3.2V20.8A3.25,3.25,0,0,0,3.2,24H18.43l5.17,5.69a.57.57,0,0,0,.4.18c.07,0,.54,0,.61,0a.54.54,0,0,0,.34-.5V24H28.8A3.25,3.25,0,0,0,32,20.8V3.2A3.25,3.25,0,0,0,28.8,0ZM18.21,21.92H3.82a1.54,1.54,0,0,1-1.74-1.74V3.82A1.54,1.54,0,0,1,3.82,2.08H28.18a1.54,1.54,0,0,1,1.74,1.74V20.18a1.54,1.54,0,0,1-1.74,1.74H23.84a.53.53,0,0,0-.53.53v4.28L19.05,22s0,0-.06,0h-.78ZM30.93,20.8"></path></svg>
                                    <span class="comment__counter">4</span>
                                </a>
                            </div>
                        </div>
                    
</div>
                

            <div id="phContent_RelatedPublicationsControl_divSeeMore" class="actionbar">
                <a href="https://www.dobreprogramy.pl/Google-Chrome,Powiazania,64621.html" id="phContent_RelatedPublicationsControl_aSeeMore" class="button action float-right normal">zobacz więcej <span class="icon-container"><i class="icon-right-open"></i></span></a>
            </div>
        </div>
    </section>
</div>


        
<!-- overflow-visible span-12 grid-fix block grid-margin-px30-top grid-margin-px30-bottom  -->
<section class="span-12 grid-margin-px30-top grid-margin-px30-bottom" id="reviews">
    <div class="title-bar simple" role="heading">
        <div>
            <h2>Recenzje użytkowników</h2>
        </div>
    </div>
    <div id="phContent_ReviewsControl_rolelist" class="bubble-list">
        

        

        <div id="phContent_ReviewsControl_divNoLogin" class="text-center holder">
            <span class="text-h3">Zaloguj się, aby dodać swoją recenzję!</span>
            <div class="text-center"><a data-action="loginbox" class="button action normal span-3 grid-center cursor-pointer">logowanie</a></div>
        </div>
        <!--  -->
        
        
    </div>
</section>
<script type="text/javascript">
    window.toolsReviews = (function ($) {
        $("#reviews").find('[data-action=new_review]').on('click', function (e) {
            e.preventDefault();
            $("#phContent_ReviewsControl_divReviewsBottom, #phContent_ReviewsControl_divNoReviews").hide();
            $("#phContent_ReviewsControl_divReviewForm").css('height', 'auto');
        });
        $('#reviews').find('[data-action="send"]').on('click', function (e) {
            var $this = $(this);
            e.preventDefault();
            var data = {
                pros: $('#review_pros').val(),
                cons: $('#review_cons').val(),
                content: $('#review_txtContent').val(),
                rating: $('#review_rating').val(),
                id: '64621'
            }
            if (data.pros == '' || data.cons == '' || data.content == '' || data.rating == 0) {
                $(this).parents('.bubble').find('[data-role="messenger"]').html('<div class="alert alert-error">Pola formularza nie mogą być puste. Pamiętaj również o wystawieniu oceny.</div>');
                return false;
            } else {
                $(this).parents('.bubble').find('[data-role="messenger"]').slideUp();
            }
            $.ajax({
                type: "POST",
                data: data,
                dataType: "json",
                beforeSend: function () {
                },
                url: "/Providers/ReviewsHandler.ashx",
                success: function () {
                    $this.parents('.bubble').find('footer').hide();
                    $this.parents('.bubble').find('[data-role="messenger"]').html('<div class="alert alert-success">Twoja recenzja została przesłana do moderatora.</div>').slideDown();
                    $('#review_pros').parent().html(data.pros);
                    $('#review_cons').parent().html(data.cons);
                    $('#review_txtContent').parent().html('<p>' + data.content + '</p>');
                }
            });
        });
        $('#reviewRatingBox').rating({ setHiddenInput: true });
    });
</script>

    <!--googleoff: index-->
    


<script type="text/javascript">
    if (!Array.prototype.includes) {
        Array.prototype.includes = function(searchElement /*, fromIndex*/ ) {
            'use strict';
            var O = Object(this);
            var len = parseInt(O.length) || 0;
            if (len === 0) return false;
            var n = parseInt(arguments[1]) || 0;
            var k;
            if (n >= 0) {
                k = n;
            } else {
                k = len + n;
                if (k < 0) k = 0;
            }
            var currentElement;
            while (k < len) {
                currentElement = O[k];
                if (searchElement === currentElement || (searchElement !== searchElement && currentElement !== currentElement)) { // NaN !== NaN
                    return true;
                }
                k++;
            }
            return false;
        };
    }
</script>
<section id="komentarze" class="overflow-visible span-12 grid-fix block grid-margin-px30-top" style="min-height:1px;">
    

    <div data-role="list" class="block-content bubble-list large" style="min-height:150px;">
        <div id="comments-container" class="dp"></div>
    </div>
</section>
    <!--googleon: index-->
</div>
    <input type="hidden" name="ctl00$phContent$hidChannel" id="phContent_hidChannel" />


            <script type="text/javascript">(function(d,c){var scripts = document.getElementsByTagName('script'),script = d.currentScript || scripts[scripts.length - 1],slot = d.createElement('div');slot.setAttribute(c,'');var frame = d.createElement('div');frame.setAttribute('cglcare', '');frame.appendChild(slot);script.parentElement.insertBefore(frame,script);WP.push(function() {WP.gaf.registerSlot(53,slot);});script.parentElement && script.parentElement.removeChild(script);}(document,'nkvtthp'));</script>

            

            <div id="divPoweredBy" class="page-element main no-mobile" style="margin-top: 50px; margin-bottom: 50px;">

                <div class="table" style="display: table; width: 100%;">
                    <div class="table-cell text-center">
                        <a href="http://www.tp-link.com" target="_blank" rel="noopener">
                            <img src="//static.dpcdn.pl/res/b/tp-link-logo_a.png" alt="TP-LINK" />
                        </a>

                    </div>
                    <div class="table-cell text-center">
                        <a href="https://www.qnap.com/i/pl/" target="_blank" rel="noopener">
                            <img src="//static.dpcdn.pl/res/b/qnap.png" alt="QNAP" />
                        </a>
                    </div>
                </div>
            </div>

        </div>

        <!-- footer -->
        <footer class="footer" id="footer">
            <div class="section">
                <div class="section__container">
                    
                    <div class="row">
                        <div class="col">
                            <div class="title">Kategorie</div>
                            <ul class="list">
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/Aktualnosci,Wszystkie,0.html">Publikacje</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/Wideo.html">Wideo</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/Gry,Windows.html">Gry</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/Blog.html">Blogi</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="#rssModal" data-toggle="modal">Kanały RSS</a>
                                </li>
                            </ul>
                        </div>
                        <div class="col">
                            <div class="title">
                                Programy
                            </div>
                            <ul class="list">
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/Programy,Windows.html">
                                        <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15 15"><path d="M0 8.24v4.48l6.24.92v-5.4zm0 0M6.24 1.37L0 2.28v4.48h6.24zm0 0M15 6.76V0L7.68 1.07v5.69zm0 0M7.68 13.92L15 15V8.24H7.68zm0 0"/></svg>
                                        Windows</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/Programy,Mac.html">
                                    <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12.26 15"><path d="M.63 5.51c-1.27 2.2-.46 5.54.94 7.57C2.27 14.09 3 15 4 15a2.91 2.91 0 0 0 1.1-.3 3.08 3.08 0 0 1 1.31-.31 3 3 0 0 1 1.25.3 2.54 2.54 0 0 0 1.2.31c1.09 0 1.76-1 2.35-1.87a8.53 8.53 0 0 0 1-2.11.12.12 0 0 0-.06-.15A3.13 3.13 0 0 1 10.28 8a3.24 3.24 0 0 1 1.52-2.7.16.16 0 0 0 .06-.08.12.12 0 0 0 0-.1 3.55 3.55 0 0 0-2.8-1.55h-.24A5 5 0 0 0 7.06 4a2.63 2.63 0 0 1-.83.25A2.6 2.6 0 0 1 5.36 4a4.26 4.26 0 0 0-1.53-.4 3.76 3.76 0 0 0-3.2 1.91zm0 0"/><path d="M9.06 0A3.42 3.42 0 0 0 6.8 1.16 3.23 3.23 0 0 0 6 3.54a.12.12 0 0 0 .11.11h.16a2.9 2.9 0 0 0 2.12-1.09 3.39 3.39 0 0 0 .8-2.45.14.14 0 0 0-.13-.11zm0 0"/></svg>
                                    Mac</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/Programy,Android.html">
                                    <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 13.12 15"><path d="M.94 5.63a.94.94 0 0 0-.94.93v3.75a.94.94 0 1 0 1.87 0V6.56a.93.93 0 0 0-.93-.93zM12.19 5.63a.94.94 0 0 0-.94.93v3.75a.94.94 0 1 0 1.87 0V6.56a.93.93 0 0 0-.93-.93zM2.81 5.68v5.62a.94.94 0 0 0 .94.94v1.82a.94.94 0 1 0 1.87 0v-1.82H7.5v1.82a.94.94 0 1 0 1.87 0v-1.82a.94.94 0 0 0 .94-.94V5.68zM5.62 2.34a.47.47 0 1 1-.46.47.47.47 0 0 1 .46-.47zm1.88 0a.47.47 0 1 1-.5.47.47.47 0 0 1 .47-.47zM2.81 4.69h7.5A3.71 3.71 0 0 0 8.9 1.78l.84-1a.47.47 0 0 0-.07-.67.46.46 0 0 0-.67.06l-.9 1.11A3.62 3.62 0 0 0 6.56.94 3.71 3.71 0 0 0 5 1.29L4.12.18A.47.47 0 0 0 3.46.1a.48.48 0 0 0-.08.66l.83 1a3.72 3.72 0 0 0-1.4 2.9z"/></svg>
                                    Android</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/Programy,iOS.html">
                                    <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 15 7.44"><path d="M.07 7.32h1.24V2H.07zm.62-6A.68.68 0 1 0 .69 0a.68.68 0 1 0 0 1.35zM5.44 0C3.34 0 2 1.44 2 3.73s1.34 3.71 3.44 3.71S8.85 6 8.85 3.73 7.53 0 5.44 0zm0 1.1c1.28 0 2.1 1 2.1 2.62s-.82 2.62-2.1 2.62-2.1-1-2.1-2.62.81-2.61 2.1-2.61zm3.93 4.2c.06 1.33 1.14 2.14 2.8 2.14S15 6.59 15 5.22c0-1.07-.62-1.67-2.08-2L12.1 3c-.89-.21-1.25-.48-1.25-1s.55-1 1.36-1 1.39.4 1.44 1.08h1.23C14.85.87 13.8 0 12.22 0S9.55.88 9.55 2.15c0 1 .62 1.67 1.95 2l.93.22c.91.21 1.27.51 1.27 1s-.6 1-1.46 1S10.7 6 10.62 5.3z"/></svg>
                                    iOS</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/Programy,WindowsPhone.html">
                                    <svg class="icon" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 13.5 17"><path d="M2.72 7.41v2.27l3.28.48V7.41zM6 3.74l-3.27.48v2.26H6zM10.57 6.48V3l-3.75.56v2.92zM6.82 10.31l3.75.56V7.41H6.82z"/><path d="M11.42 0H2.08A2 2 0 0 0 0 2.08v12.84A2 2 0 0 0 2.08 17h9.34a2 2 0 0 0 2.08-2.08V2.08A2 2 0 0 0 11.42 0zM6.87 16.37A1.16 1.16 0 1 1 8 15.21a1.16 1.16 0 0 1-1.13 1.16zm5.59-3H1V2.05a.87.87 0 0 1 .88-.88h9.66a.87.87 0 0 1 .88.88z" fill-rule="evenodd"/></svg>
                                    Windows Phone</a>
                                </li>
                            </ul>
                        </div>
                        <div class="col">
                            <div class="title">
                                Społeczność
                            </div>
                            <ul class="list">
                                <li class="list__item">
                                    <a class="list__link" href="https://forum.dobreprogramy.pl">Forum dyskusyjne</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.youtube.com/user/dobreprogramypl">YouTube</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.facebook.com/dobreprogramy">Facebook</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://plus.google.com/+dobreprogramy">Google+</a>
                                </li>
                                <li class="list__item">
                                    <a  class="list__link"href="http://www.twitter.com/dobreprogramy">Twitter</a>
                                </li>
                            </ul>
                        </div>
                        <div class="col">
                            <div class="title">
                                dobreprogramy.pl
                            </div>
                            <ul class="list">
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/OPortalu.html">O portalu</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/Regulamin.html">Regulamin</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://onas.wp.pl/poufnosc.html">Polityka prywatności</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/Reklama.html">Reklama</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/Praca.html">Praca</a>
                                </li>
                                <li class="list__item">
                                    <a class="list__link" href="https://www.dobreprogramy.pl/OPortalu.html#redakcja">Kontakt</a>
                                </li>
                            </ul>
                        </div>
                    </div>
                </div>
            </div>
            <div class="copyright">
                <div class="copyright__container">
                    <div class="switches">
                        <a id="lnkSwitchMobile" class="mobile-switch" href="javascript:__doPostBack(&#39;ctl00$lnkSwitchMobile&#39;,&#39;&#39;)">wersja mobilna</a>
                        <a id="lnkSwitchSkinDark" class="mobile-switch" href="javascript:__doPostBack(&#39;ctl00$lnkSwitchSkinDark&#39;,&#39;&#39;)">tryb nocny</a>
                    </div>

                    <a href="/" name="Strona główna" title="dobreprogramy.pl" aria-label="Strona główna"><svg class="logo" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 163.03 20"><path d="M5.91 5.44A4.38 4.38 0 0 0 2.06 7.7a4.61 4.61 0 0 0 0 4.55 4.51 4.51 0 0 0 1.64 1.69 4.28 4.28 0 0 0 2.2.6 4.52 4.52 0 0 0 2.25-.6 4.16 4.16 0 0 0 1.63-1.62 4.65 4.65 0 0 0 .58-2.3 4.49 4.49 0 0 0-1.29-3.27 4.26 4.26 0 0 0-3.16-1.31M11.73 0v15.6h-1.46v-1.94a6 6 0 0 1-2 1.67 5.49 5.49 0 0 1-2.47.55 5.48 5.48 0 0 1-4.07-1.73A5.8 5.8 0 0 1 0 9.94a5.73 5.73 0 0 1 1.7-4.16 5.58 5.58 0 0 1 4.1-1.73 5.37 5.37 0 0 1 2.51.59 5.84 5.84 0 0 1 2 1.77V0zM20.34 5.48a4.14 4.14 0 0 0-3.09 1.33A4.46 4.46 0 0 0 16 10a4.64 4.64 0 0 0 .59 2.28 4.13 4.13 0 0 0 1.59 1.62 4.44 4.44 0 0 0 4.39 0 4.13 4.13 0 0 0 1.59-1.62 4.64 4.64 0 0 0 .55-2.28 4.46 4.46 0 0 0-1.29-3.22 4.15 4.15 0 0 0-3.08-1.33m0-1.43a5.59 5.59 0 0 1 4.31 1.88A5.89 5.89 0 0 1 26.2 10a5.88 5.88 0 0 1-1.64 4.12 5.52 5.52 0 0 1-4.22 1.76 5.55 5.55 0 0 1-4.23-1.76A5.88 5.88 0 0 1 14.47 10 5.89 5.89 0 0 1 16 5.94a5.57 5.57 0 0 1 4.32-1.89M34.79 14.49a4.36 4.36 0 0 0 3.86-2.26 4.58 4.58 0 0 0 0-4.55A4.34 4.34 0 0 0 37 6a4.16 4.16 0 0 0-2.19-.61 4.46 4.46 0 0 0-2.26.61 4.19 4.19 0 0 0-1.64 1.62 4.64 4.64 0 0 0-.57 2.3 4.45 4.45 0 0 0 1.28 3.26 4.29 4.29 0 0 0 3.17 1.31M29 15.6V0h1.45v6.28a6.12 6.12 0 0 1 2-1.67A5.69 5.69 0 0 1 39 5.78 5.84 5.84 0 0 1 40.71 10 5.7 5.7 0 0 1 39 14.15a5.51 5.51 0 0 1-4.1 1.73 5.26 5.26 0 0 1-2.49-.58 5.78 5.78 0 0 1-2-1.77v2.07zM42.81 4.33h1.47V6a5.13 5.13 0 0 1 1.4-1.45 2.7 2.7 0 0 1 1.52-.48 2.58 2.58 0 0 1 1.28.39l-.75 1.22a1.87 1.87 0 0 0-.77-.2 2.11 2.11 0 0 0-1.39.59 3.76 3.76 0 0 0-1 1.85 17.65 17.65 0 0 0-.27 3.89v3.79h-1.49V4.33zM59.23 8.83A4.89 4.89 0 0 0 58.38 7a4 4 0 0 0-1.47-1.11A4.41 4.41 0 0 0 55 5.44a4.12 4.12 0 0 0-2.85 1.07 4.8 4.8 0 0 0-1.32 2.32zm0 3.05l1.22.64a6.7 6.7 0 0 1-1.38 1.89 5.58 5.58 0 0 1-1.78 1.1 6.15 6.15 0 0 1-2.22.37 5.38 5.38 0 0 1-4.31-1.8A6.1 6.1 0 0 1 49.18 10a6 6 0 0 1 1.32-3.82A5.38 5.38 0 0 1 55 4.05a5.55 5.55 0 0 1 4.6 2.19 6 6 0 0 1 1.24 3.85H50.67a4.55 4.55 0 0 0 1.26 3.2 4 4 0 0 0 3 1.25 4.84 4.84 0 0 0 1.68-.3 4.21 4.21 0 0 0 1.39-.78 6.66 6.66 0 0 0 1.23-1.58M69.1 6.63a3 3 0 0 0-2.22.92A3.32 3.32 0 0 0 66 9.94a3.42 3.42 0 0 0 .88 2.43 2.94 2.94 0 0 0 2.22.93 2.85 2.85 0 0 0 2.17-.94 3.4 3.4 0 0 0 .89-2.36 3.36 3.36 0 0 0-.87-2.39 2.87 2.87 0 0 0-2.19-.93m-3-2.3v1.19a5.21 5.21 0 0 1 1.65-1.14 4.85 4.85 0 0 1 1.9-.38 4.91 4.91 0 0 1 3.74 1.67A6 6 0 0 1 75 10a5.9 5.9 0 0 1-1.59 4.2 5 5 0 0 1-3.77 1.69 4.53 4.53 0 0 1-1.81-.35 5.33 5.33 0 0 1-1.66-1.13v5.32h-2.86V4.33zM76.64 4.33h2.45v1.44a3 3 0 0 1 1-1.28 2.48 2.48 0 0 1 1.42-.44 2.64 2.64 0 0 1 1.14.29l-.87 2.44a2 2 0 0 0-.78-.25 1.27 1.27 0 0 0-1.09.81 7.37 7.37 0 0 0-.45 3.16v5.1h-2.82V4.33zM89.41 6.72a2.89 2.89 0 0 0-2.19.91 3.26 3.26 0 0 0-.87 2.37 3.26 3.26 0 0 0 .86 2.37 2.89 2.89 0 0 0 2.19.91 2.92 2.92 0 0 0 2.2-.92 3.26 3.26 0 0 0 .88-2.36 3.23 3.23 0 0 0-.86-2.35 2.93 2.93 0 0 0-2.21-.9m0-2.67a6 6 0 0 1 3 .8 5.88 5.88 0 0 1 2.18 8.08 5.61 5.61 0 0 1-2.19 2.14 6 6 0 0 1-3 .78 5.6 5.6 0 0 1-4.13-1.72A5.72 5.72 0 0 1 83.53 10a5.71 5.71 0 0 1 1.94-4.4 5.65 5.65 0 0 1 3.9-1.53M103.06 6.7a3 3 0 0 0-2.21.89 3.11 3.11 0 0 0-.85 2.25 3.15 3.15 0 0 0 .89 2.3 3 3 0 0 0 2.24.9 2.92 2.92 0 0 0 2.17-.88 3.16 3.16 0 0 0 .86-2.3 3.12 3.12 0 0 0-.86-2.28 3 3 0 0 0-2.22-.88M106 4.33h2.8V14a6.37 6.37 0 0 1-1.15 4.2A5.77 5.77 0 0 1 103 20a8.34 8.34 0 0 1-2.79-.41 5 5 0 0 1-1.9-1.22 4.91 4.91 0 0 1-1.15-1.94h3.12a2.68 2.68 0 0 0 1.07.71 4.27 4.27 0 0 0 1.55.25 4 4 0 0 0 1.84-.36 2.08 2.08 0 0 0 1-.91 4.59 4.59 0 0 0 .26-1.92 4.74 4.74 0 0 1-1.56 1.07 5 5 0 0 1-1.86.33 5.1 5.1 0 0 1-3.84-1.6 5.68 5.68 0 0 1-1.57-4.13 5.76 5.76 0 0 1 1.66-4.31 5 5 0 0 1 3.59-1.47 4.72 4.72 0 0 1 1.84.36A5.91 5.91 0 0 1 106 5.58V4.33zM111 4.33h2.45v1.44a3 3 0 0 1 1-1.28 2.51 2.51 0 0 1 1.42-.44 2.6 2.6 0 0 1 1.14.29l-.87 2.44a2 2 0 0 0-.82-.25 1.28 1.28 0 0 0-1.09.81 7.37 7.37 0 0 0-.45 3.16v5.1H111V4.33zM123.77 6.63a2.87 2.87 0 0 0-2.18.93 3.36 3.36 0 0 0-.87 2.39 3.44 3.44 0 0 0 .88 2.41 2.87 2.87 0 0 0 2.18.94 2.94 2.94 0 0 0 2.22-.93 3.41 3.41 0 0 0 .87-2.43 3.31 3.31 0 0 0-.87-2.39 3 3 0 0 0-2.23-.92m3-2.3h2.83V15.6h-2.83v-1.19a5.51 5.51 0 0 1-1.66 1.13 4.65 4.65 0 0 1-1.8.34 5 5 0 0 1-3.78-1.69 5.9 5.9 0 0 1-1.59-4.2 6 6 0 0 1 1.54-4.27 5 5 0 0 1 5.65-1.29 5.07 5.07 0 0 1 1.64 1.14V4.33zM132.4 4.33h2.83v1.31a4.78 4.78 0 0 1 1.61-1.19 4.57 4.57 0 0 1 1.93-.4 3.65 3.65 0 0 1 1.91.52 3.76 3.76 0 0 1 1.37 1.52 4.44 4.44 0 0 1 3.79-2 4 4 0 0 1 2.12.56 3.23 3.23 0 0 1 1.31 1.46 7.72 7.72 0 0 1 .4 2.93v6.6h-2.83V9.9a4.83 4.83 0 0 0-.48-2.59 1.65 1.65 0 0 0-1.44-.68 2.2 2.2 0 0 0-1.31.42 2.44 2.44 0 0 0-.86 1.14 7.21 7.21 0 0 0-.28 2.34v5.07h-2.83v-5.44a7.64 7.64 0 0 0-.22-2.16 2 2 0 0 0-.67-1 1.79 1.79 0 0 0-1.09-.33 2.11 2.11 0 0 0-1.28.42 2.48 2.48 0 0 0-.87 1.17 7.33 7.33 0 0 0-.28 2.38v5h-2.83V4.33zM151.06 4.33h2.9l2.94 7.07 3.23-7.07h2.9l-7.07 15.39h-2.91l2.31-4.98-4.3-10.41z"/></svg></a>
                    <div>dobreprogramy są częścią Grupy Wirtualna Polska</div>
                </div>
            </div>
        </footer>

    <!-- Modal RSS -->
    <div id="rssModal" class="modal hide fade modal-dp variant-tight modal-in-page" role="dialog">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true" name="Zamknij">×</button>
        <div class="modal-header">
            <span>Kanały RSS</span>
        </div>
        <div id="Div2" style="display: none;" class="alert alert-error modal-body"></div>
        <div class="modal-body">
            <p>
                <a href="https://feeds.feedburner.com/dobreprogramy/Aktualnosci"><i class="icon-rss color-warn"></i><span class="color-content">&nbsp;Publikacje</span></a><br />
                <a href="https://feeds.feedburner.com/dobreprogramy/BlogCzytelnikow"><i class="icon-rss color-warn"></i><span class="color-content">&nbsp;Blog czytelników</span></a><br />
                <a href="https://feeds.feedburner.com/dobreprogramy/Gry"><i class="icon-rss color-warn"></i><span class="color-content">&nbsp;Gry</span></a><br />
                <a href="https://feeds.feedburner.com/dobreprogramy/Wszystkie"><i class="icon-rss color-warn"></i><span class="color-content">&nbsp;Wszystkie publikacje</span></a><br />
                <a href="https://feeds.feedburner.com/dobreprogramy/NoweWersjeStabilne"><i class="icon-rss color-warn"></i><span class="color-content">&nbsp;Programy dla Windows (wersje stabilne)</span></a><br />
                <a href="https://feeds.feedburner.com/dobreprogramy/NoweWersjeRozwojowe"><i class="icon-rss color-warn"></i><span class="color-content">&nbsp;Programy dla Windows (wersje rozwojowe)</span></a><br />
                <a href="https://feeds.feedburner.com/dobreprogramy/Forum"><i class="icon-rss color-warn"></i><span class="color-content">&nbsp;Ostatnie tematy na forum</span></a>
            </p>
        </div>
        <div class="modal-footer">
            <a href="#" role="button" class="button normal standard color-content" data-dismiss="modal" aria-hidden="true">Zamknij</a>
        </div>
    </div>
    <!-- /Modal RSS -->

    <!-- Google Analytics -->
    <script>
        (function (i, s, o, g, r, a, m) {
            i['GoogleAnalyticsObject'] = r; i[r] = i[r] || function () {
                (i[r].q = i[r].q || []).push(arguments)
            }, i[r].l = 1 * new Date(); a = s.createElement(o),
                m = s.getElementsByTagName(o)[0]; a.async = 1; a.src = g; m.parentNode.insertBefore(a, m)
        })(window, document, 'script', '//www.google-analytics.com/analytics.js', 'ga');

        ga('create', 'UA-3114185-1', 'auto');
        ga('set', 'dimension1', 'Anonymous');

        ga('set', 'contentGroup1', 'Programy: Mac');
ga('set', 'contentGroup2', 'Mac: Przeglądarki stron WWW');

        ga('send', 'pageview');

    </script>
    <!-- End Google Analytics -->

    <script type="text/javascript" src="/cdn/2019_04_12_2/assets/js/core.min.js"></script>

    
    <!-- Modal publicationReport -->
    <div id="reportModal" class="modal hide fade modal-dp variant-tight modal-in-page" role="dialog">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true" name="Zamknij">×</button>
        <div class="modal-header">
            <span>Zaproponuj zmiany w opisie</span>
        </div>

        <div class="modal-body">
            <p>Literówka lub błąd w opisie? Ważna funkcja, o której nie napisaliśmy? Będziemy wdzięczni za przesłanie sugestii za pośrednictwem poniższego formularza:</p>
            <div class="form-input-group">
                <textarea id="txtReportContent" rows="5" class="heightfix input-block-level" role="textbox" aria-label="Treść propozycji zmiany" placeholder="Treść propozycji zmiany"></textarea>
            </div>
        </div>
        <div class="modal-footer">
            <a role="button" class="button action float-right normal" href="javascript:sendReport(64621)">Wyślij</a>
        </div>
    </div>
    <!-- /Modal publicationReport -->
    <!-- Modal publicationReport -->
    <div id="updateModal" class="modal hide fade modal-dp variant-tight modal-in-page" role="dialog">
        <button type="button" class="close" data-dismiss="modal" aria-hidden="true" name="Zamknij">×</button>
        <div class="modal-header">
            <span>Zgłoś aktualizację programu</span>
        </div>

        <div class="modal-body">
            <p>Jeśli prezentowany przez nas program jest już nieaktualny, będziemy wdzięczni za informację.</p>
            <div class="form-input-group">
                <textarea id="txtUpdateContent" rows="5" class="heightfix input-block-level" role="textbox" aria-label="Numer nowej wersji lub link do strony na jej temat" placeholder="Numer nowej wersji lub link do strony na jej temat"></textarea>
            </div>
        </div>
        <div class="modal-footer">
            <a role="button" class="button action float-right normal" href="javascript:sendUpdate(64621)">Wyślij</a>
        </div>
    </div>
    <!-- /Modal publicationReport -->

    <!-- Modal Marken -->
    

    

    
  

    

    
    
    <script type="text/javascript" src="//static.dpcdn.pl/2019_04_12_2/assets/js/splitted-dest/jquery.dp.switchableButton.js"></script>
    <script type="text/javascript" src="//static.dpcdn.pl/2019_04_12_2/assets/js/graph.js"></script>
    <script type="text/javascript" src="//static.dpcdn.pl/2019_04_12_2/assets/js/splitted-dest/swiper.js"></script>
    <script type="text/javascript" src="//static.dpcdn.pl/2019_04_12_2/assets/js/splitted-dest/jquery.magnific-popup.js"></script>
    <script type="text/javascript" src="//static.dpcdn.pl/2019_04_12_2/assets/js/splitted-dest/chartist.js"></script>
    <script type="text/javascript" src="//static.dpcdn.pl/2019_04_12_2/assets/js/splitted-dest/chartist-legend.js"></script>
    <script type="text/javascript" src="//static.dpcdn.pl/2019_04_12_2/assets/js/splitted-dest/jquery.dp.rating.js"></script>
    
   

    

    <script>
        (function (w, d) {
            var isFunc = function (m) {
                return m && {}.toString.call(m) === '[object Function]'
            }

            // lazy attach gallery
            if (isFunc(w.initToolsGallery)) w.initToolsGallery(w);

            // lazy init tools review
            if (isFunc(w.toolsReviews)) w.toolsReviews($);
        })(window, document);
    </script>

    <script type="text/javascript">
        window.addEventListener("message", receiveMessage, false);

        function receiveMessage(event) {
            if (event.origin !== "https://emarken.pl")
                return;
            if (event.data == 'close')
                $('#buyForm button').click();

        }
    </script>
    <!-- /Modal Marken -->
    <script type="text/javascript">

        $(window).on('load', function () {
            $('#phContent_page_content').shortener({
                pattern: '[data-shortener="pattern"]',
                target: '#phContent_sidebar',
                targetChildrenSel: '.shortener',
                leaveOne: false,
                offset: -50
            });
        });

        function sendReport(id) {
            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ id: id, content: $("#txtReportContent").val() }),
                dataType: "json",
                url: "/Providers/NotifyAdminHandler.asmx/SendReport",
                success: function (result) {
                    if (result.d) {
                        $("#reportModal").modal("hide");
                    }
                }
            });
        }

        function sendUpdate(id) {
            $.ajax({
                type: "POST",
                contentType: "application/json; charset=utf-8",
                data: JSON.stringify({ id: id, content: $("#txtUpdateContent").val() }),
                dataType: "json",
                url: "/Providers/NotifyAdminHandler.asmx/SendToolsUpdate",
                success: function (result) {
                    if (result.d) {
                        $("#updateModal").modal("hide");
                    }
                }
            });
        }
    </script>

    

    
    <script type="text/javascript">$(window).on('load', function () {$.ajax({url: "https://www.dobreprogramy.pl/Providers/DownloadsChart.ashx?ID=64621",type: "GET",dataType: "json",success: createGraph,error: function (xhr, status) {console.log(xhr + " " + status);}});});$('#download').switchableButton({ toggle_button: '#phContent_btnOtherLinks' });$('#ratingBox').rating({ providerUrl: 'https://www.dobreprogramy.pl/Providers/RatingHandler.ashx', customData: { id: 64621 } });</script>
    


    <script type="text/javascript">

        if (Dp.isMobile == false) {
            SyntaxHighlighter.config.tagName = 'code';
            SyntaxHighlighter.defaults.gutter = false;
            SyntaxHighlighter.defaults.toolbar = false;
            SyntaxHighlighter.all();
        }
    </script>

    
    
    






<div class="aspNetHidden">

	<input type="hidden" name="__VIEWSTATEGENERATOR" id="__VIEWSTATEGENERATOR" value="EE017B7F" />
	<input type="hidden" name="__EVENTVALIDATION" id="__EVENTVALIDATION" value="XncdLiKWaau2xI1h5yA4SXPNJ8Wigfag8B8zzckqj6JjYQLpZD8TfJsE9hpN6LjTvl9rbxmpDez5XYQI1Ri487hX6qGjtgQIlFTBRA+wlYMPSELnVt99amtqgFKxGJOMSD1gDb9eGiaFMmx2wFwO6lHHyRGx1YbxEDK9KQNFcOaR1Dwy6lmiIKCy0m0fwonolMbq7DhRgscf3iQAuT3HG9sKr1wgzgunLAWCxnZHLtJkPhJ0" />
</div></form>


    
    <style>
        #sgf-a {
            display: block;
            position: fixed;
            bottom: 10px;
            right: 10px;
            width: 150px;
            z-index: 100;
            padding: 10px;
            background: #e4e4e4;
            border-radius: 4px;
            box-shadow: 0 0 30px 0 rgba(0,0,0,0.05);
        }
        #sgf-a > small {
            display: block;
            color: #777;
            margin: 5px 0;
            margin-bottom: 2px;
            text-transform: uppercase;
        }
        #sgf-a > img{
            display: block;
            width: 100%;
            height: auto;
            border-radius: 3px;
        }
        #sgf-a > span{
            display: block;
            font-size: 15px;
            line-height: 20px;
            color: #333;
            font-weight: bold;
        }
        #sgf-a:hover > span {
            color: #88ae04;
        }
        @media screen and (max-width: 1349px) {
            #sgf-a {
                display: none;
            }
        }
    </style>

    




    

    <script>
        function loadJs(src) {
            console.info("[loadJs:Injecting]", src);
            return new Promise((resolve, reject) => {
                const s = document.createElement('script');
                s.type = 'text/javascript';
                s.src = src;
                s.defer = true;
                s.onload = resolve;
                s.onerror = resolve;
                document.body.appendChild(s);
            });
        }

        function loadCss(src) {
            return new Promise((resolve, reject) => {
                const l = document.createElement('link');
                l.rel = 'stylesheet';
                l.defer = true;
                l.async = true;
                l.href = src;
                document.head.appendChild(l) && resolve();
            });
        }

        function loadCommentsAssets() {
            console.info('[LAZY:Comments] Init');
            const promises = [];
            const assets = [
                "//static.dpcdn.pl/2019_04_12_2/comments/dist/dp-comments.css",
                "//static.dpcdn.pl/2019_04_12_2/comments/dist/runtime.js",
                "//static.dpcdn.pl/2019_04_12_2/comments/dist/vendor.js",
                "//static.dpcdn.pl/2019_04_12_2/comments/dist/dp-comments.js",
            ];
            
            for (let i = 0; i < assets.length; i++) {
                console.info('[LAZY:Comments] Injecting', assets[i]);
                promises.push(assets[i].indexOf('.css') !== -1 ? loadCss(assets[i]) : loadJs(assets[i]));
            }

            Promise.all(promises).then(function () {
                console.info('[LAZY:Comments] Injected!');
                return window.initComments();
            })
        }

        function loadFirebase() {
            console.info('[LAZY:Firebase] Init');

            const assets = [
                "https://www.gstatic.com/firebasejs/3.7.1/firebase.js",
                "https://www.gstatic.com/firebasejs/3.7.1/firebase-app.js",
                "https://www.gstatic.com/firebasejs/3.7.1/firebase-messaging.js",
            ];

            loadJs(assets[0]).then(function () {
                return loadJs(assets[1]);
            }).then(function () {
                return loadJs(assets[2]);
                }).then(function () {
                    console.info('[LAZY:Firebase] Injected!');
                    // Initialize Firebase
                    // TODO: Replace with your project's customized code snippet
                    var config = {
                        apiKey: "AIzaSyDPmrFZg4-k2quVjMviM960rYGAxe6KVdY",
                        authDomain: "webpush-8f396.firebaseapp.com",
                        databaseURL: "https://webpush-8f396.firebaseio.com",
                        storageBucket: "webpush-8f396.appspot.com",
                        messagingSenderId: "355303748481",
                        provider: "/Providers/WebPushHelper.ashx"
                    };

                    function getSavedToken() {
                        return window.localStorage.getItem('fcmPushToken');
                    }

                    function setTokenSentToServer(token) {
                        if (token) {
                            window.localStorage.setItem('fcmPushToken', token);
                        } else {
                            window.localStorage.removeItem('fcmPushToken');
                        }
                    }

                    function sendTokenToServer(token) {
                        $.post(config.provider, {
                            what: 'add',
                            dt: token
                        }, function (response) {
                            console.log(response);
                            setTokenSentToServer(token);
                        });
                    }

                    function updateTokenOnServer(oldToken, newToken) {
                        $.post(config.provider, {
                            what: 'update',
                            olddt: oldToken,
                            newdt: newToken
                        }, function (response) {
                            console.log(response);
                            setTokenSentToServer(newToken);
                        });
                    }

                    function _deleteToken(token) {
                        $.post(config.provider, {
                            what: 'delete',
                            dt: token
                        }, function (response) {
                            console.log(response);
                            setTokenSentToServer(false);
                            console.log('Token deleted:', token);
                        });
                    }

                    firebase.initializeApp(config);

                    // Retrieve Firebase Messaging object.
                    var messaging = firebase.messaging();

                    messaging.requestPermission().then(function () {
                        console.log('Notification permission granted.');
                        return messaging.getToken();
                    }).then(function (token) {
                        sendTokenToServer(token);
                    }).catch(function (err) {
                        if (err.code === 'messaging/permission-blocked') {
                            _deleteToken(getSavedToken());
                        }

                        console.log('Unable to get permission to notify.', err);
                    });

                    $.notify.addStyle('dobreprogramy', {
                        html: '<div><a href="#" class="close">×</a><div class="image" data-notify-html="image"></div><div class="content"><h4 class="title" data-notify-text="title"></h4><p data-notify-text="body"></p><small data-notify-text="click_action"></small></div><div class="progress"><div></div></div></div>'
                    });

                    messaging.onMessage(function (payload) {
                        if (payload.notification) {

                            var icon = $('<img />', {
                                src: payload.notification.icon,
                                class: payload.notification.icon.indexOf('badge.png') === -1 ? null : 'notification-badge'
                            })

                            $.notify({
                                title: payload.notification.title,
                                image: icon,
                                body: payload.notification.body,
                                click_action: payload.notification.click_action
                            }, {
                                    style: 'dobreprogramy',
                                    className: 'fcm-notification',
                                    clickToHide: true,
                                    autoHide: true,
                                    breakNewLines: true,
                                    autoHideDelay: 15000,
                                    showAnimation: 'show',
                                    hideAnimation: 'hide',
                                    showDuration: 100,
                                    hideDuration: 100
                                });
                        } else {
                            console.warn('Notification parse error');
                        }
                    });

                    $(document).on('click', '.notifyjs-dobreprogramy-fcm-notification', function (event) {
                        event.preventDefault();
                        var target = (event.currentTarget) ? event.currentTarget : event.srcElement;
                        var url = this.querySelector('small').textContent;
                        var closeButton = this.querySelector('.close');

                        if (event.target === closeButton) {
                            $(this).trigger('notify-hide');
                            console.info('Closing', event.target);
                        } else {
                            console.info('Jump', event.target);
                            window.location.href = url;
                        }
                        return false;
                    });

                    //function deleteToken() {
                    //    messaging.getToken()
                    //        .then(function (currentToken) {
                    //            messaging.deleteToken(currentToken)
                    //                .then(function () {
                    //                    _deleteToken(currentToken);
                    //                })
                    //                .catch(function (err) {
                    //                    console.log('Unable to delete token. ', err);
                    //                });
                    //        })
                    //        .catch(function (err) {
                    //            console.log('Error retrieving Instance ID token. ', err);
                    //        });
                    //}

                    //// Callback fired if Instance ID token is updated.
                    messaging.onTokenRefresh(function () {
                        messaging.getToken().then(function (refreshedToken) {
                            console.log('Token refreshed.');
                            var oldToken = getSavedToken();

                            if (oldToken) {
                                setTokenSentToServer(false);
                                updateTokenOnServer(oldToken, refreshedToken);
                            } else {
                                console.warn('Old FCM Push token not found during token update...');
                            }

                        }).catch(function (err) {
                            console.log('Unable to retrieve refreshed token ', err);
                        });
                    });
            })
        }

        (function () {
            if (window.location.hash.indexOf('#komentarz') !== -1) {
                setTimeout(loadCommentsAssets, 0);
            } else {
                inViewport(document.getElementById('komentarze'), {
                    offset: 400,
                    debounce: 50,
                }, function () {
                    setTimeout(loadCommentsAssets, 0);
                });
            }

            setTimeout(loadFirebase, 50);
        })();
    </script>


    
        <script type="text/javascript">
            (function (w, d) {
                var debug = /[?&]debug_screening=true/.test(location.search);
                var rendered = [];
                var body = d.body || d.documentElement;
                var mainForm = d.getElementById('form1');
                var isHomepage = mainForm.classList.contains('homepage');

                var init = function (options) {
                    var target = null;
                    var triggerLayer = null;
                    var isSmallScreen = body.clientWidth <= 1160;

                    // return if mobile or bo arguments passed
                    if (Dp.isMobile || isSmallScreen || !options.imgUrl) return;

                    var sectionsForegroundElements = ['h3', '.see-more', '.icon-right-open', 'a.title', '.meta', '.comment', '.meta__icon'];
                    var img = 'url(' + options.imgUrl.trim() + ')';
                    var bgColor = options.bgColor ? ' ' + options.bgColor : '';
                    var foregroundColor = invertColor(options.bgColor, true);
                    var sectionScreening = typeof options.section === 'undefined' || options.section === false;

                    // main screening
                    if (sectionScreening) {
                        target = body;
                        if (!target || rendered.indexOf(options.url) != -1) return;
                        triggerLayer = mainForm; // isHomepage ? d.getElementById('page-content') :
                        target.classList.add('framed-body');
                        target.style.background = img + ' no-repeat fixed 50% 0 / 1920px 1080px' + bgColor;
                    }

                    // sections screening
                    else {
                        target = d.querySelectorAll('[class^="home-section tag-"]')[options.section];
                        if (!target || rendered.indexOf(target) != -1) return;
                        target.classList.add("sc");
                        triggerLayer = target;
                        d.getElementById('form1').classList.add('is-home');
                        target.style.background = img + ' no-repeat 50% 0 / 1920px 650px' + bgColor;

                        // style section UI buttons color to inverted bgColor
                        var i = sectionsForegroundElements.length;
                        while (i--) {
                            var el = target.querySelectorAll(sectionsForegroundElements[i]);
                            var x = el.length;
                            while (x--) {
                                if (el[x]) {
                                    if (el[x].tagName.toLowerCase() == 'svg') {
                                        el[x].style.fill = foregroundColor;
                                    } else {
                                        el[x].style.color = foregroundColor;
                                    }
                                }
                            }
                        }
                    }

                    if (!options.url) return;

                    // prevent re-render
                    if (rendered.indexOf(options.url) < 0) {
                        rendered.push(options.url);
                        if (debug) console.info("[SCREENING] Rendered image");
                    }

                    triggerLayer.addEventListener('mouseover', function (e) {
                        if (e.target === this && checkScrollPos(target, e)) {
                            this.style.cursor = 'pointer';
                            if (debug) console.info('[SCREENING ' + (target.className || '') + '] Clickable...');
                        } else {
                            this.style.cursor = 'auto';
                            if (debug) console.info('[SCREENING ' + (target.className || '') + '] Not clickable...');
                        }
                    }, false);

                    triggerLayer.addEventListener('mouseout', function (e) {
                        this.style.cursor = 'auto';
                    }, false);

                    triggerLayer.addEventListener('click', function (e) {
                        if (!e.target || e.target !== this || !checkScrollPos(target, e)) {
                            if (debug) console.info('[SCREENING ' + (target.className || '') + '] Deny click...');
                            return true;
                        } else {
                            e.preventDefault();
                            if (debug) console.info('[SCREENING ' + (target.className || '') + '] CLICK!');
                            open(options.url);
                            return false;
                        };
                    }, false);

                    if (debug) console.table({
                        position: sectionScreening ? 'Głowny' : 'Sekcja #' + (options.section + 1),
                        isHomepage: isHomepage,
                        rendered: rendered.indexOf(options.url) > -1
                    });
                }

                w.DPSC = function (options) {
                    if (debug) console.log('[SCREENING] call', d.readyState);
                    if (~d.readyState.indexOf('v') || ~d.readyState.indexOf('c')) {
                        //console.info('[SCREENING] DOM Ready');
                        return init(options);
                    } else {
                        //console.info('[SCREENING] Waiting for DOM...');
                        d.addEventListener('readystatechange', function () {
                            if (~d.readyState.indexOf('v')) return init(options);
                        }, false);
                    }
                };

                var checkScrollPos = function (target, e) {
                    var scrollTop = w.scrollY || w.scrollTop || d.getElementsByTagName("html")[0].scrollTop;
                    if (!isHomepage || target !== body) return true;
                    return scrollTop < 1080 && e.screenY <= 1080 + 36; // + top menu height
                };

                var open = function (url) {
                    w.open(url, '_blank');
                    w.focus();
                };

                var padZero = function (str, len) {
                    len = len || 2;
                    var zeros = new Array(len).join('0');
                    return (zeros + str).slice(-len);
                };

                var invertColor = function (hex, bw) {
                    if (hex.indexOf('#') === 0) hex = hex.slice(1);

                    // convert 3-digit hex to 6-digits.
                    if (hex.length === 3) {
                        hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
                    }

                    if (hex.length !== 6) {
                        throw new Error('Invalid HEX color.');
                    }

                    var r = parseInt(hex.slice(0, 2), 16),
                        g = parseInt(hex.slice(2, 4), 16),
                        b = parseInt(hex.slice(4, 6), 16);
                    if (bw) {
                        return (r * 0.299 + g * 0.587 + b * 0.114) > 186
                            ? '#000000'
                            : '#FFFFFF';
                    }
                    // invert color components
                    r = (255 - r).toString(16);
                    g = (255 - g).toString(16);
                    b = (255 - b).toString(16);
                    // pad each with zeros and return
                    return "#" + padZero(r) + padZero(g) + padZero(b);
                };

                var listener = function (e) {
                    if (e.origin.includes('dobreprogramy.pl') && e.data.imgUrl) {
                        if (debug) console.log('[SCREENING] received data from DFP iframe: ', e.data);
                        return w.DPSC(e.data);
                    }
                    return;
                };

                w.addEventListener('message', listener, false);

                // DEBUG
            

            })(window, document);
    </script>
    

    
    

    
    

        
        

        <script>
            !function (e, t) { var n = ["section.content-list.block", "#phContent_avastBadge"], r = !1, o = [], i = function (e) { return { value: e, writable: !1, configurable: !1, enumerable: !1 } }, l = function () { for (var e = n.length; e--;) { var r = t.querySelectorAll(n[e]), o = r.length; if (r) for (; r.length && o--;)try { var l = r[o]; Object.defineProperties(l, { parentElement: i(null), remove: i(function () { }), hidden: i(!1) }) } catch (a) { } } }, a = function () { for (var e = t.styleSheets, n = e.length; n--;) { var r = e[n], o = r.ownerNode; null !== r.href || r.disabled || !o || (o.innerText || o.innerHTML).length > 0 || (r.disabled = !0, o.parentElement && o.parentElement.removeChild(o)) } }, c = function () { if (!r) { for (var e = t.scripts, n = e.length; n--;) { var i = e[n]; if (i.src && "" !== i.src && i.isError && (o.push(i.src), i.src.indexOf("gemius") > -1)) break } return r = !0, o.length > 0 } }, u = function () { var e = c(); e && a() }; try { l(), "complete" === t.readyState ? setTimeout(u, 0) : e.onload = function () { "complete" === t.readyState && setTimeout(u, 0) } } catch (f) { } }(window, document);
        </script>
    

</body>
</html>
